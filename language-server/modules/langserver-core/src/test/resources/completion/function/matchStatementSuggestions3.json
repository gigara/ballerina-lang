{
  "position": {
    "line": 11,
    "character": 15
  },
  "source": "function/source/matchStatementSuggestions3.bal",
  "items": [
    {
      "label": "fromJsonString(str)",
      "kind": "Function",
      "detail": "Snippet",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value_  \n  \nParse a string in JSON format and return the the value that it represents.\nAll numbers in the JSON will be represented as float values.\nReturns an error if the string cannot be parsed.\n  \n  \n  \n**Returns** `(json|error)`   \n- `value` parsed to json or error  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "fromJsonString(str) {\n${1:value} \u003d\u003e {${2}}\n}",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "getCodePoint(str,i)",
      "kind": "Function",
      "detail": "Snippet",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.string_  \n  \nReturns the unicode codepoint at index `i`.\n  \n**Params**  \n- `int` i: code point index  \n  \n**Returns** `int`   \n- code point  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "getCodePoint(str,i) {\n${1:value} \u003d\u003e {${2}}\n}",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "toCodePointInts(str)",
      "kind": "Function",
      "detail": "Snippet",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.string_  \n  \nReturns an array with an int for each code point in `str`.\n  \n  \n  \n**Returns** `int[]`   \n- CodePoint array  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "toCodePointInts(str) {\n${1:value} \u003d\u003e {${2}}\n}",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "toUpperAscii(str)",
      "kind": "Function",
      "detail": "Snippet",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.string_  \n  \nReturn a-z into A-Z and leave other characters unchanged.\n  \n  \n  \n**Returns** `string`   \n- Ascii upper cased string  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "toUpperAscii(str) {\n${1:value} \u003d\u003e {${2}}\n}",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "substring(str,startIndex,endIndex)",
      "kind": "Function",
      "detail": "Snippet",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.string_  \n  \nReturns a string that is a substring of this string.\n  \n**Params**  \n- `int` startIndex: the beginning index, inclusive.  \n- `int` endIndex: the ending index, exclusive.  \n  \n**Returns** `string`   \n- specified substring.  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "substring(str,startIndex,endIndex) {\n${1:value} \u003d\u003e {${2}}\n}",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "iterator(str)",
      "kind": "Function",
      "detail": "Snippet",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.string_  \n  \nReturns an iterator over the string\nThe iterator will return the substrings of length 1 in order.\n  \n  \n  \n**Returns** ``   \n- iterator object  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "iterator(str) {\n${1:value} \u003d\u003e {${2}}\n}",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "isReadOnly(value)",
      "kind": "Function",
      "detail": "Snippet",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value_  \n  \nTests whether `v` is read-only, i.e. immutable\nReturns true if read-only, false otherwise.\n  \n  \n  \n**Returns** `boolean`   \n- true if read-only, false otherwise  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "isReadOnly(value) {\n${1:value} \u003d\u003e {${2}}\n}",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "trim(str)",
      "kind": "Function",
      "detail": "Snippet",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.string_  \n  \nRemove ASCII white space characters (0x9...0xD, 0x20) from start and end of `str`.\n  \n  \n  \n**Returns** `string`   \n- trimmed string  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "trim(str) {\n${1:value} \u003d\u003e {${2}}\n}",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "join(separator)",
      "kind": "Function",
      "detail": "Snippet",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.string_  \n  \nReturns a new string composed of `strs` elements joined together with `separator`.\n  \n**Params**  \n- strs: strings to join  \n  \n**Returns** `string`   \n- joined string  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "join(separator) {\n${1:value} \u003d\u003e {${2}}\n}",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "indexOf(str,substr,startIndx)",
      "kind": "Function",
      "detail": "Snippet",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.string_  \n  \nReturns the index of the first occurrence of `substr` in the part of the `str` starting at `startIndex`\nor nil if it does not occur.\n  \n**Params**  \n- `string` substr: sub string to search for  \n- start: index to start search from  \n  \n**Returns** `(int|())`   \n- index of first `substr` occurrence or nil  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "indexOf(str,substr,startIndx) {\n${1:value} \u003d\u003e {${2}}\n}",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "toLowerAscii(str)",
      "kind": "Function",
      "detail": "Snippet",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.string_  \n  \nReturn A-Z into a-z and leave other characters unchanged.\n  \n  \n  \n**Returns** `string`   \n- lower Ascii cased string  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "toLowerAscii(str) {\n${1:value} \u003d\u003e {${2}}\n}",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "toJsonString(v)",
      "kind": "Function",
      "detail": "Snippet",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value_  \n  \nReturn the string that represents `v` in JSON format.\n  \n  \n  \n**Returns** `string`   \n- string representation of json  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "toJsonString(v) {\n${1:value} \u003d\u003e {${2}}\n}",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "toBytes(str)",
      "kind": "Function",
      "detail": "Snippet",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.string_  \n  \nRepresents `str` as an array of bytes using UTF-8.\n  \n  \n  \n**Returns** `byte[]`   \n- UTF-8 byte array  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "toBytes(str) {\n${1:value} \u003d\u003e {${2}}\n}",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "cloneReadOnly(value)",
      "kind": "Function",
      "detail": "Snippet",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value_  \n  \nReturns a clone of `value` that is read-only, i.e. immutable.\nIt corresponds to the ImmutableClone(v) abstract operation,\ndefined in the Ballerina Language Specification.\n  \n"
        }
      },
      "sortText": "120",
      "insertText": "cloneReadOnly(value) {\n${1:value} \u003d\u003e {${2}}\n}",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "length(str)",
      "kind": "Function",
      "detail": "Snippet",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.string_  \n  \nReturns the length of the string.\n  \n  \n  \n**Returns** `int`   \n- length of the `str`  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "length(str) {\n${1:value} \u003d\u003e {${2}}\n}",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "concat()",
      "kind": "Function",
      "detail": "Snippet",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.string_  \n  \nConcatenate all the `strs`. Empty string if empty.\n  \n  \n  \n**Returns** `string`   \n- concatanated string  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "concat() {\n${1:value} \u003d\u003e {${2}}\n}",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "mergeJson(j1,j2)",
      "kind": "Function",
      "detail": "Snippet",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value_  \n  \nReturn the result of merging json value `j1` with `j2`.\n  \n**Params**  \n- `json` j2: json value  \n  \n**Returns** `(json|error)`   \n- merged json value or error  \n  \nIf the merge fails, then return an error.  \nThe merge of j1 with j2 is defined as follows:  \n- if j1 is (), then the result is j2  \n- if j2 is nil, then the result is j1  \n- if j1 is a mapping and j2 is a mapping, then for each entry [k, j] in j2,  \n  set j1[k] to the merge of j1[k] with j  \n    - if j1[k] is undefined, then set j1[k] to j  \n    - if any merge fails, then the merge of j1 with j2 fails  \n    - otherwise, the result is j1.  \n- otherwise, the merge fails  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "mergeJson(j1,j2) {\n${1:value} \u003d\u003e {${2}}\n}",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "clone(value)",
      "kind": "Function",
      "detail": "Snippet",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value_  \n  \nReturns a clone of `value`.\nA clone is a deep copy that does not copy immutable subtrees.\nA clone can therefore safely be used concurrently with the original.\nIt corresponds to the Clone(v) abstract operation,\ndefined in the Ballerina Language Specification.\n  \n"
        }
      },
      "sortText": "120",
      "insertText": "clone(value) {\n${1:value} \u003d\u003e {${2}}\n}",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "endsWith(str,substr)",
      "kind": "Function",
      "detail": "Snippet",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.string_  \n  \nReturns true if `str` end with `substr`.\n  \n**Params**  \n- `string` substr: sub string  \n  \n**Returns** `boolean`   \n- whether `str` ends with `substr`  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "endsWith(str,substr) {\n${1:value} \u003d\u003e {${2}}\n}",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "toString(value)",
      "kind": "Function",
      "detail": "Snippet",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value_  \n  \nReturns a simple, human-readable representation of `value` as a string.\n  \n  \n  \n**Returns** `string`   \n- simple, human-readable string representation of `value`  \n  \n- if `value` is a string, then returns `value`  \n- if `value` is `()`, then returns an empty string  \n- if `value` is boolean, then the string `true` or `false`  \n- if `value` is an int, then return `value` represented as a decimal string  \n- if `value` is a float or decimal, then return `value` represented as a decimal string,  \n  with a decimal point only if necessary, but without any suffix indicating the type of `value`  \n  return `NaN`, `Infinity` for positive infinity, and `-Infinity` for negative infinity  \n- if `value` is a list, then returns the results toString on each member of the list  \n  separated by a space character  \n- if `value` is a map, then returns key\u003dvalue for each member separated by a space character  \n- if `value` is xml, then returns `value` in XML format (as if it occurred within an XML element)  \n- if `value` is table, TBD  \n- if `value` is an error, then a string consisting of the following in order  \n    1. the string `error`  \n    2. a space character  \n    3. the reason string  \n    4. if the detail record is non-empty  \n        1. a space character  \n        2. the result of calling toString on the detail record  \n- if `value` is an object, then  \n    - if `value` provides a `toString` method with a string return type and no required methods,  \n      then the result of calling that method on `value`  \n    - otherwise, `object` followed by some implementation-dependent string  \n- if `value` is any other behavioral type, then the identifier for the behavioral type  \n  (`function`, `future`, `service`, `typedesc` or `handle`)  \n  followed by some implementation-dependent string  \n  \nNote that `toString` may produce the same string for two Ballerina values  \nthat are not equal (in the sense of the `\u003d\u003d` operator).  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "toString(value) {\n${1:value} \u003d\u003e {${2}}\n}",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "codePointCompare(str1,str2)",
      "kind": "Function",
      "detail": "Snippet",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.string_  \n  \nLexicographically compare strings using their Unicode code points.\nThis will allow strings to be ordered in a consistent and well-defined way,\nbut the ordering will not typically be consistent with cultural expectations\nfor sorted order.\n  \n**Params**  \n- `string` str2: string to compare  \n  \n**Returns** `int`   \n- whether `str1` is greater than `str2`  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "codePointCompare(str1,str2) {\n${1:value} \u003d\u003e {${2}}\n}",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "startsWith(str,substr)",
      "kind": "Function",
      "detail": "Snippet",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.string_  \n  \nReturns true if `str` starts with `substr`.\n  \n**Params**  \n- `string` substr: sub string  \n  \n**Returns** `boolean`   \n- whether `str` starts with `substr`  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "startsWith(str,substr) {\n${1:value} \u003d\u003e {${2}}\n}",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    }
  ]
}