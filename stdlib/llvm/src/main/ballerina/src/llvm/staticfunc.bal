// Copyright (c) 2018 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
//
// WSO2 Inc. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

public function print(int value) = external;
//public function llvmLoadLibraryPermanently(string filename) returns int = external;
////public function llvmLoadLibraryPermanently(BytePointer filename) returns int = external;
////public function llvmParseCommandLineOptions(int argc, byte[] argv, BytePointer overview) = external;
////public function llvmParseCommandLineOptions(int argc, ByteBuffer argv, string overview) = external;
////public function llvmParseCommandLineOptions(int argc, BytePointer argv, string overview) = external;
////public function llvmParseCommandLineOptions(int argc, ByteBuffer argv, BytePointer overview) = external;
////public function llvmParseCommandLineOptions(int argc, byte[] argv, string overview) = external;
////public function llvmParseCommandLineOptions(int argc, PointerPointer argv, BytePointer overview) = external;
////public function llvmParseCommandLineOptions(int argc, BytePointer argv, BytePointer overview) = external;
//public function llvmSearchForAddressOfSymbol(string symbolName) returns Pointer = external;
////public function llvmSearchForAddressOfSymbol(BytePointer symbolName) returns Pointer = external;
//public function llvmAddSymbol(string symbolName, Pointer symbolValue) = external;
////public function llvmAddSymbol(BytePointer symbolName, Pointer symbolValue) = external;
//public function llvmInitializeCore(LLVMPassRegistryRef r) = external;
//public function llvmShutdown() = external;
////public function llvmCreateMessage(BytePointer message) returns BytePointer = external;
//public function llvmCreateMessage(string message) returns ByteBuffer = external;
////public function llvmDisposeMessage(byte[] message) = external;
////public function llvmDisposeMessage(ByteBuffer message) = external;
////public function llvmDisposeMessage(BytePointer message) = external;
//public function llvmContextCreate() returns LLVMContextRef = external;
public function llvmGetGlobalContext() returns LLVMContextRef = external;
//public function llvmContextSetDiagnosticHandler(LLVMContextRef c, LLVMDiagnosticHandler handler, Pointer diagnosticContext) = external;
//public function llvmContextGetDiagnosticHandler(LLVMContextRef c) returns LLVMDiagnosticHandler = external;
//public function llvmContextGetDiagnosticContext(LLVMContextRef c) returns Pointer = external;
//public function llvmContextSetYieldCallback(LLVMContextRef c, LLVMYieldCallback callback, Pointer opaqueHandle) = external;
//public function llvmContextDispose(LLVMContextRef c) = external;
//public function llvmGetDiagInfoDescription(LLVMDiagnosticInfoRef di) returns BytePointer = external;
//public function llvmGetDiagInfoSeverity(LLVMDiagnosticInfoRef di) returns int = external;
////public function llvmGetMDKindIDInContext(LLVMContextRef c, BytePointer name, int sLen) returns int = external;
//public function llvmGetMDKindIDInContext(LLVMContextRef c, string name, int sLen) returns int = external;
////public function llvmGetMDKindID(BytePointer name, int sLen) returns int = external;
//public function llvmGetMDKindID(string name, int sLen) returns int = external;
////public function llvmGetEnumAttributeKindForName(BytePointer name, int sLen) returns int = external;
//public function llvmGetEnumAttributeKindForName(string name, int sLen) returns int = external;
//public function llvmGetLastEnumAttributeKind() returns int = external;
//public function llvmCreateEnumAttribute(LLVMContextRef c, int kindID, int val) returns LLVMAttributeRef = external;
//public function llvmGetEnumAttributeKind(LLVMAttributeRef a) returns int = external;
//public function llvmGetEnumAttributeValue(LLVMAttributeRef a) returns int = external;
//public function llvmCreateStringAttribute(LLVMContextRef c, string k, int kLength, string v, int vLength) returns LLVMAttributeRef = external;
////public function llvmCreateStringAttribute(LLVMContextRef c, BytePointer k, int kLength, BytePointer v, int vLength) returns LLVMAttributeRef = external;
////public function llvmGetStringAttributeKind(LLVMAttributeRef a, IntBuffer length) returns string = external;
////public function llvmGetStringAttributeKind(LLVMAttributeRef a, int[] length) returns BytePointer = external;
////public function llvmGetStringAttributeKind(LLVMAttributeRef a, IntPointer length) returns BytePointer = external;
////public function llvmGetStringAttributeValue(LLVMAttributeRef a, int[] length) returns BytePointer = external;
////public function llvmGetStringAttributeValue(LLVMAttributeRef a, IntBuffer length) returns string = external;
////public function llvmGetStringAttributeValue(LLVMAttributeRef a, IntPointer length) returns BytePointer = external;
//public function llvmIsEnumAttribute(LLVMAttributeRef a) returns int = external;
//public function llvmIsStringAttribute(LLVMAttributeRef a) returns int = external;
public function llvmModuleCreateWithName(string moduleID) returns LLVMModuleRef = external;
////public function llvmModuleCreateWithName(BytePointer moduleID) returns LLVMModuleRef = external;
////public function llvmModuleCreateWithNameInContext(BytePointer moduleID, LLVMContextRef c) returns LLVMModuleRef = external;
//public function llvmModuleCreateWithNameInContext(string moduleID, LLVMContextRef c) returns LLVMModuleRef = external;
//public function llvmCloneModule(LLVMModuleRef m) returns LLVMModuleRef = external;
//public function llvmDisposeModule(LLVMModuleRef m) = external;
//public function llvmGetModuleIdentifier(LLVMModuleRef m, SizeTPointer len) returns BytePointer = external;
//public function llvmSetModuleIdentifier(LLVMModuleRef m, string ident, int len) = external;
////public function llvmSetModuleIdentifier(LLVMModuleRef m, BytePointer ident, int len) = external;
//public function llvmGetDataLayoutStr(LLVMModuleRef m) returns BytePointer = external;
//public function llvmGetDataLayout(LLVMModuleRef m) returns BytePointer = external;
//public function llvmSetDataLayout(LLVMModuleRef m, string dataLayoutStr) = external;
////public function llvmSetDataLayout(LLVMModuleRef m, BytePointer dataLayoutStr) = external;
//public function llvmGetTarget(LLVMModuleRef m) returns BytePointer = external;
//public function llvmSetTarget(LLVMModuleRef m, string triple) = external;
////public function llvmSetTarget(LLVMModuleRef m, BytePointer triple) = external;
public function llvmDumpModule(LLVMModuleRef m) = external;
////public function llvmPrintModuleToFile(LLVMModuleRef m, BytePointer filename, byte[] errorMessage) returns int = external;
////public function llvmPrintModuleToFile(LLVMModuleRef m, string filename, ByteBuffer errorMessage) returns int = external;
////public function llvmPrintModuleToFile(LLVMModuleRef m, string filename, BytePointer errorMessage) returns int = external;
////public function llvmPrintModuleToFile(LLVMModuleRef m, BytePointer filename, ByteBuffer errorMessage) returns int = external;
////public function llvmPrintModuleToFile(LLVMModuleRef m, string filename, byte[] errorMessage) returns int = external;
////public function llvmPrintModuleToFile(LLVMModuleRef m, BytePointer filename, PointerPointer errorMessage) returns int = external;
////public function llvmPrintModuleToFile(LLVMModuleRef m, BytePointer filename, BytePointer errorMessage) returns int = external;
//public function llvmPrintModuleToString(LLVMModuleRef m) returns BytePointer = external;
//public function llvmSetModuleInlineAsm(LLVMModuleRef m, string asm) = external;
////public function llvmSetModuleInlineAsm(LLVMModuleRef m, BytePointer asm) = external;
//public function llvmGetModuleContext(LLVMModuleRef m) returns LLVMContextRef = external;
//public function llvmGetTypeByName(LLVMModuleRef m, string name) returns LLVMTypeRef = external;
////public function llvmGetTypeByName(LLVMModuleRef m, BytePointer name) returns LLVMTypeRef = external;
////public function llvmGetNamedMetadataNumOperands(LLVMModuleRef m, BytePointer name) returns int = external;
//public function llvmGetNamedMetadataNumOperands(LLVMModuleRef m, string name) returns int = external;
////public function llvmGetNamedMetadataOperands(LLVMModuleRef m, BytePointer name, LLVMValueRef dest) = external;
//public function llvmGetNamedMetadataOperands(LLVMModuleRef m, string name, PointerPointer dest) = external;
//public function llvmAddNamedMetadataOperand(LLVMModuleRef m, string name, LLVMValueRef val) = external;
////public function llvmAddNamedMetadataOperand(LLVMModuleRef m, BytePointer name, LLVMValueRef val) = external;
public function llvmAddFunction(LLVMModuleRef m, string name, LLVMTypeRef functionTy) returns LLVMValueRef = external;
////public function llvmAddFunction(LLVMModuleRef m, BytePointer name, LLVMTypeRef functionTy) returns LLVMValueRef = external;
////public function llvmGetNamedFunction(LLVMModuleRef m, BytePointer name) returns LLVMValueRef = external;
//public function llvmGetNamedFunction(LLVMModuleRef m, string name) returns LLVMValueRef = external;
//public function llvmGetFirstFunction(LLVMModuleRef m) returns LLVMValueRef = external;
//public function llvmGetLastFunction(LLVMModuleRef m) returns LLVMValueRef = external;
//public function llvmGetNextFunction(LLVMValueRef fn) returns LLVMValueRef = external;
//public function llvmGetPreviousFunction(LLVMValueRef fn) returns LLVMValueRef = external;
//public function llvmGetTypeKind(LLVMTypeRef ty) returns int = external;
//public function llvmTypeIsSized(LLVMTypeRef ty) returns int = external;
//public function llvmGetTypeContext(LLVMTypeRef ty) returns LLVMContextRef = external;
//public function llvmPrintTypeToString(LLVMTypeRef val) returns BytePointer = external;
public function llvmInt1TypeInContext(LLVMContextRef c) returns LLVMTypeRef = external;
//public function llvmInt8TypeInContext(LLVMContextRef c) returns LLVMTypeRef = external;
//public function llvmInt16TypeInContext(LLVMContextRef c) returns LLVMTypeRef = external;
//public function llvmInt32TypeInContext(LLVMContextRef c) returns LLVMTypeRef = external;
//public function llvmInt64TypeInContext(LLVMContextRef c) returns LLVMTypeRef = external;
//public function llvmInt128TypeInContext(LLVMContextRef c) returns LLVMTypeRef = external;
//public function llvmIntTypeInContext(LLVMContextRef c, int numBits) returns LLVMTypeRef = external;
public function llvmInt1Type() returns LLVMTypeRef = external;
public function llvmInt8Type() returns LLVMTypeRef = external;
//public function llvmInt16Type() returns LLVMTypeRef = external;
public function llvmInt32Type() returns LLVMTypeRef = external;
public function llvmInt64Type() returns LLVMTypeRef = external;
//public function llvmInt128Type() returns LLVMTypeRef = external;
//public function llvmIntType(int numBits) returns LLVMTypeRef = external;
//public function llvmGetIntTypeWidth(LLVMTypeRef integerTy) returns int = external;
//public function llvmHalfTypeInContext(LLVMContextRef c) returns LLVMTypeRef = external;
//public function llvmFloatTypeInContext(LLVMContextRef c) returns LLVMTypeRef = external;
//public function llvmDoubleTypeInContext(LLVMContextRef c) returns LLVMTypeRef = external;
//public function llvmX86FP80TypeInContext(LLVMContextRef c) returns LLVMTypeRef = external;
//public function llvmFP128TypeInContext(LLVMContextRef c) returns LLVMTypeRef = external;
//public function llvmPPCFP128TypeInContext(LLVMContextRef c) returns LLVMTypeRef = external;
//public function llvmHalfType() returns LLVMTypeRef = external;
//public function llvmFloatType() returns LLVMTypeRef = external;
//public function llvmDoubleType() returns LLVMTypeRef = external;
//public function llvmX86FP80Type() returns LLVMTypeRef = external;
//public function llvmFP128Type() returns LLVMTypeRef = external;
//public function llvmPPCFP128Type() returns LLVMTypeRef = external;
//public function llvmFunctionType0(LLVMTypeRef returnType, LLVMTypeRef paramTypes, int paramCount, int isVarArg) returns LLVMTypeRef = external;
public function llvmFunctionType1(LLVMTypeRef returnType, LLVMTypeRef[] paramTypes, int paramCount, int isVarArg) returns LLVMTypeRef = external;
//public function llvmIsFunctionVarArg(LLVMTypeRef functionTy) returns int = external;
//public function llvmGetReturnType(LLVMTypeRef functionTy) returns LLVMTypeRef = external;
//public function llvmCountParamTypes(LLVMTypeRef functionTy) returns int = external;
//public function llvmGetParamTypes0(LLVMTypeRef functionTy, PointerPointer dest) = external;
//public function llvmGetParamTypes1(LLVMTypeRef functionTy, LLVMTypeRef dest) = external;
//public function llvmStructTypeInContext0(LLVMContextRef c, LLVMTypeRef elementTypes, int elementCount, int packed) returns LLVMTypeRef = external;
//public function llvmStructTypeInContext1(LLVMContextRef c, PointerPointer elementTypes, int elementCount, int packed) returns LLVMTypeRef = external;
//public function llvmStructType0(PointerPointer elementTypes, int elementCount, int packed) returns LLVMTypeRef = external;
//public function llvmStructType1(LLVMTypeRef elementTypes, int elementCount, int packed) returns LLVMTypeRef = external;
////public function llvmStructCreateNamed(LLVMContextRef c, BytePointer name) returns LLVMTypeRef = external;
public function llvmStructCreateNamed(LLVMContextRef c, string name) returns LLVMTypeRef = external;
//public function llvmGetStructName(LLVMTypeRef ty) returns BytePointer = external;
//public function llvmStructSetBody0(LLVMTypeRef structTy, LLVMTypeRef elementTypes, int elementCount, int packed) = external;
public function llvmStructSetBody1(LLVMTypeRef structTy, LLVMTypeRef[] elementTypes, int elementCount, int packed) = external;
//public function llvmCountStructElementTypes(LLVMTypeRef structTy) returns int = external;
//public function llvmGetStructElementTypes0(LLVMTypeRef structTy, LLVMTypeRef dest) = external;
//public function llvmGetStructElementTypes1(LLVMTypeRef structTy, PointerPointer dest) = external;
//public function llvmStructGetTypeAtIndex(LLVMTypeRef structTy, int i) returns LLVMTypeRef = external;
//public function llvmIsPackedStruct(LLVMTypeRef structTy) returns int = external;
//public function llvmIsOpaqueStruct(LLVMTypeRef structTy) returns int = external;
//public function llvmGetElementType(LLVMTypeRef ty) returns LLVMTypeRef = external;
//public function llvmGetSubtypes0(LLVMTypeRef tp, PointerPointer arr) = external;
//public function llvmGetSubtypes1(LLVMTypeRef tp, LLVMTypeRef arr) = external;
//public function llvmGetNumContainedTypes(LLVMTypeRef tp) returns int = external;
//public function llvmArrayType(LLVMTypeRef elementType, int elementCount) returns LLVMTypeRef = external;
//public function llvmGetArrayLength(LLVMTypeRef arrayTy) returns int = external;
public function llvmPointerType(LLVMTypeRef elementType, int addressSpace) returns LLVMTypeRef = external;
//public function llvmGetPointerAddressSpace(LLVMTypeRef pointerTy) returns int = external;
//public function llvmVectorType(LLVMTypeRef elementType, int elementCount) returns LLVMTypeRef = external;
//public function llvmGetVectorSize(LLVMTypeRef vectorTy) returns int = external;
//public function llvmVoidTypeInContext(LLVMContextRef c) returns LLVMTypeRef = external;
//public function llvmLabelTypeInContext(LLVMContextRef c) returns LLVMTypeRef = external;
//public function llvmX86MMXTypeInContext(LLVMContextRef c) returns LLVMTypeRef = external;
//public function llvmTokenTypeInContext(LLVMContextRef c) returns LLVMTypeRef = external;
//public function llvmMetadataTypeInContext(LLVMContextRef c) returns LLVMTypeRef = external;
public function llvmVoidType() returns LLVMTypeRef = external;
//public function llvmLabelType() returns LLVMTypeRef = external;
//public function llvmX86MMXType() returns LLVMTypeRef = external;
public function llvmTypeOf(LLVMValueRef val) returns LLVMTypeRef = external;
//public function llvmGetValueKind(LLVMValueRef val) returns int = external;
//public function llvmGetValueName(LLVMValueRef val) returns BytePointer = external;
////public function llvmSetValueName(LLVMValueRef val, BytePointer name) = external;
//public function llvmSetValueName(LLVMValueRef val, string name) = external;
//public function llvmDumpValue(LLVMValueRef val) = external;
//public function llvmPrintValueToString(LLVMValueRef val) returns BytePointer = external;
//public function llvmReplaceAllUsesWith(LLVMValueRef oldVal, LLVMValueRef newVal) = external;
//public function llvmIsConstant(LLVMValueRef val) returns int = external;
//public function llvmIsUndef(LLVMValueRef val) returns int = external;
//public function llvmIsAArgument(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsABasicBlock(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAInlineAsm(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAUser(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAConstant(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsABlockAddress(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAConstantAggregateZero(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAConstantArray(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAConstantDataSequential(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAConstantDataArray(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAConstantDataVector(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAConstantExpr(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAConstantFP(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAConstantInt(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAConstantPointerNull(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAConstantStruct(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAConstantTokenNone(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAConstantVector(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAGlobalValue(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAGlobalAlias(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAGlobalObject(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAFunction(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAGlobalVariable(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAUndefValue(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAInstruction(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsABinaryOperator(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsACallInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAIntrinsicInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsADbgInfoIntrinsic(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsADbgDeclareInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAMemIntrinsic(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAMemCpyInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAMemMoveInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAMemSetInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsACmpInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAFCmpInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAICmpInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAExtractElementInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAGetElementPtrInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAInsertElementInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAInsertValueInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsALandingPadInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAPHINode(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsASelectInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAShuffleVectorInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAStoreInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsATerminatorInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsABranchInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAIndirectBrInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAInvokeInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAReturnInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsASwitchInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAUnreachableInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAResumeInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsACleanupReturnInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsACatchReturnInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAFuncletPadInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsACatchPadInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsACleanupPadInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAUnaryInstruction(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAAllocaInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsACastInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAAddrSpaceCastInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsABitCastInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAFPExtInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAFPToSIInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAFPToUIInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAFPTruncInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAIntToPtrInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAPtrToIntInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsASExtInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsASIToFPInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsATruncInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAUIToFPInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAZExtInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAExtractValueInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsALoadInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAVAArgInst(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAMDNode(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmIsAMDString(LLVMValueRef val) returns LLVMValueRef = external;
//public function llvmGetFirstUse(LLVMValueRef val) returns LLVMUseRef = external;
//public function llvmGetNextUse(LLVMUseRef u) returns LLVMUseRef = external;
//public function llvmGetUser(LLVMUseRef u) returns LLVMValueRef = external;
//public function llvmGetUsedValue(LLVMUseRef u) returns LLVMValueRef = external;
//public function llvmGetOperand(LLVMValueRef val, int index) returns LLVMValueRef = external;
//public function llvmGetOperandUse(LLVMValueRef val, int index) returns LLVMUseRef = external;
//public function llvmSetOperand(LLVMValueRef user, int index, LLVMValueRef val) = external;
//public function llvmGetNumOperands(LLVMValueRef val) returns int = external;
//public function llvmConstNull(LLVMTypeRef ty) returns LLVMValueRef = external;
//public function llvmConstAllOnes(LLVMTypeRef ty) returns LLVMValueRef = external;
//public function llvmGetUndef(LLVMTypeRef ty) returns LLVMValueRef = external;
//public function llvmIsNull(LLVMValueRef val) returns int = external;
//public function llvmConstPointerNull(LLVMTypeRef ty) returns LLVMValueRef = external;
public function llvmConstInt(LLVMTypeRef intTy, int n, int signExtend) returns LLVMValueRef = external;
////public function llvmConstIntOfArbitraryPrecision(LLVMTypeRef intTy, int numWords, LongPointer words) returns LLVMValueRef = external;
////public function llvmConstIntOfArbitraryPrecision(LLVMTypeRef intTy, int numWords, LongBuffer words) returns LLVMValueRef = external;
////public function llvmConstIntOfArbitraryPrecision(LLVMTypeRef intTy, int numWords, long[] words) returns LLVMValueRef = external;
////public function llvmConstIntOfString(LLVMTypeRef intTy, BytePointer text, byte radix) returns LLVMValueRef = external;
////public function llvmConstIntOfString(LLVMTypeRef intTy, string text, byte radix) returns LLVMValueRef = external;
////public function llvmConstIntOfStringAndSize(LLVMTypeRef intTy, string text, int sLen, byte radix) returns LLVMValueRef = external;
////public function llvmConstIntOfStringAndSize(LLVMTypeRef intTy, BytePointer text, int sLen, byte radix) returns LLVMValueRef = external;
////public function llvmConstReal(LLVMTypeRef realTy, double n) returns LLVMValueRef = external;
//public function llvmConstRealOfString(LLVMTypeRef realTy, string text) returns LLVMValueRef = external;
////public function llvmConstRealOfString(LLVMTypeRef realTy, BytePointer text) returns LLVMValueRef = external;
////public function llvmConstRealOfStringAndSize(LLVMTypeRef realTy, BytePointer text, int sLen) returns LLVMValueRef = external;
//public function llvmConstRealOfStringAndSize(LLVMTypeRef realTy, string text, int sLen) returns LLVMValueRef = external;
//public function llvmConstIntGetZExtValue(LLVMValueRef constantVal) returns int = external;
//public function llvmConstIntGetSExtValue(LLVMValueRef constantVal) returns int = external;
////public function llvmConstRealGetDouble(LLVMValueRef constantVal, IntPointer losesInfo) returns double = external;
////public function llvmConstRealGetDouble(LLVMValueRef constantVal, int[] losesInfo) returns double = external;
////public function llvmConstRealGetDouble(LLVMValueRef constantVal, IntBuffer losesInfo) returns double = external;
////public function llvmConstStringInContext(LLVMContextRef c, BytePointer str, int length, int dontNullTerminate) returns LLVMValueRef = external;
//public function llvmConstStringInContext(LLVMContextRef c, string str, int length, int dontNullTerminate) returns LLVMValueRef = external;
////public function llvmConstString(BytePointer str, int length, int dontNullTerminate) returns LLVMValueRef = external;
//public function llvmConstString(string str, int length, int dontNullTerminate) returns LLVMValueRef = external;
//public function llvmIsConstantString(LLVMValueRef c) returns int = external;
//public function llvmGetAsString(LLVMValueRef c, SizeTPointer length) returns BytePointer = external;
//public function llvmConstStructInContext0(LLVMContextRef c, LLVMValueRef constantVals, int count, int packed) returns LLVMValueRef = external;
//public function llvmConstStructInContext1(LLVMContextRef c, PointerPointer constantVals, int count, int packed) returns LLVMValueRef = external;
//public function llvmConstStruct0(LLVMValueRef constantVals, int count, int packed) returns LLVMValueRef = external;
//public function llvmConstStruct1(PointerPointer constantVals, int count, int packed) returns LLVMValueRef = external;
//public function llvmConstArray0(LLVMTypeRef elementTy, LLVMValueRef constantVals, int length) returns LLVMValueRef = external;
//public function llvmConstArray1(LLVMTypeRef elementTy, PointerPointer constantVals, int length) returns LLVMValueRef = external;
//public function llvmConstNamedStruct0(LLVMTypeRef structTy, PointerPointer constantVals, int count) returns LLVMValueRef = external;
//public function llvmConstNamedStruct1(LLVMTypeRef structTy, LLVMValueRef constantVals, int count) returns LLVMValueRef = external;
//public function llvmGetElementAsConstant(LLVMValueRef c, int idx) returns LLVMValueRef = external;
//public function llvmConstVector0(PointerPointer scalarConstantVals, int size) returns LLVMValueRef = external;
//public function llvmConstVector1(LLVMValueRef scalarConstantVals, int size) returns LLVMValueRef = external;
//public function llvmGetConstOpcode(LLVMValueRef constantVal) returns int = external;
//public function llvmAlignOf(LLVMTypeRef ty) returns LLVMValueRef = external;
//public function llvmSizeOf(LLVMTypeRef ty) returns LLVMValueRef = external;
//public function llvmConstNeg(LLVMValueRef constantVal) returns LLVMValueRef = external;
//public function llvmConstNSWNeg(LLVMValueRef constantVal) returns LLVMValueRef = external;
//public function llvmConstNUWNeg(LLVMValueRef constantVal) returns LLVMValueRef = external;
//public function llvmConstFNeg(LLVMValueRef constantVal) returns LLVMValueRef = external;
//public function llvmConstNot(LLVMValueRef constantVal) returns LLVMValueRef = external;
//public function llvmConstAdd(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef = external;
//public function llvmConstNSWAdd(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef = external;
//public function llvmConstNUWAdd(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef = external;
//public function llvmConstFAdd(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef = external;
//public function llvmConstSub(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef = external;
//public function llvmConstNSWSub(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef = external;
//public function llvmConstNUWSub(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef = external;
//public function llvmConstFSub(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef = external;
//public function llvmConstMul(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef = external;
//public function llvmConstNSWMul(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef = external;
//public function llvmConstNUWMul(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef = external;
//public function llvmConstFMul(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef = external;
//public function llvmConstUDiv(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef = external;
//public function llvmConstExactUDiv(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef = external;
//public function llvmConstSDiv(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef = external;
//public function llvmConstExactSDiv(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef = external;
//public function llvmConstFDiv(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef = external;
//public function llvmConstURem(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef = external;
//public function llvmConstSRem(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef = external;
//public function llvmConstFRem(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef = external;
//public function llvmConstAnd(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef = external;
//public function llvmConstOr(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef = external;
//public function llvmConstXor(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef = external;
//public function llvmConstICmp(int predicate, LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef = external;
//public function llvmConstFCmp(int predicate, LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef = external;
//public function llvmConstShl(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef = external;
//public function llvmConstLShr(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef = external;
//public function llvmConstAShr(LLVMValueRef lhsConstant, LLVMValueRef rhsConstant) returns LLVMValueRef = external;
//public function llvmConstGEP0(LLVMValueRef constantVal, LLVMValueRef constantIndices, int numIndices) returns LLVMValueRef = external;
//public function llvmConstGEP1(LLVMValueRef constantVal, PointerPointer constantIndices, int numIndices) returns LLVMValueRef = external;
//public function llvmConstInBoundsGEP0(LLVMValueRef constantVal, LLVMValueRef constantIndices, int numIndices) returns LLVMValueRef = external;
//public function llvmConstInBoundsGEP1(LLVMValueRef constantVal, PointerPointer constantIndices, int numIndices) returns LLVMValueRef = external;
//public function llvmConstTrunc(LLVMValueRef constantVal, LLVMTypeRef toType) returns LLVMValueRef = external;
//public function llvmConstSExt(LLVMValueRef constantVal, LLVMTypeRef toType) returns LLVMValueRef = external;
//public function llvmConstZExt(LLVMValueRef constantVal, LLVMTypeRef toType) returns LLVMValueRef = external;
//public function llvmConstFPTrunc(LLVMValueRef constantVal, LLVMTypeRef toType) returns LLVMValueRef = external;
//public function llvmConstFPExt(LLVMValueRef constantVal, LLVMTypeRef toType) returns LLVMValueRef = external;
//public function llvmConstUIToFP(LLVMValueRef constantVal, LLVMTypeRef toType) returns LLVMValueRef = external;
//public function llvmConstSIToFP(LLVMValueRef constantVal, LLVMTypeRef toType) returns LLVMValueRef = external;
//public function llvmConstFPToUI(LLVMValueRef constantVal, LLVMTypeRef toType) returns LLVMValueRef = external;
//public function llvmConstFPToSI(LLVMValueRef constantVal, LLVMTypeRef toType) returns LLVMValueRef = external;
//public function llvmConstPtrToInt(LLVMValueRef constantVal, LLVMTypeRef toType) returns LLVMValueRef = external;
//public function llvmConstIntToPtr(LLVMValueRef constantVal, LLVMTypeRef toType) returns LLVMValueRef = external;
//public function llvmConstBitCast(LLVMValueRef constantVal, LLVMTypeRef toType) returns LLVMValueRef = external;
//public function llvmConstAddrSpaceCast(LLVMValueRef constantVal, LLVMTypeRef toType) returns LLVMValueRef = external;
//public function llvmConstZExtOrBitCast(LLVMValueRef constantVal, LLVMTypeRef toType) returns LLVMValueRef = external;
//public function llvmConstSExtOrBitCast(LLVMValueRef constantVal, LLVMTypeRef toType) returns LLVMValueRef = external;
//public function llvmConstTruncOrBitCast(LLVMValueRef constantVal, LLVMTypeRef toType) returns LLVMValueRef = external;
//public function llvmConstPointerCast(LLVMValueRef constantVal, LLVMTypeRef toType) returns LLVMValueRef = external;
//public function llvmConstIntCast(LLVMValueRef constantVal, LLVMTypeRef toType, int isSigned) returns LLVMValueRef = external;
//public function llvmConstFPCast(LLVMValueRef constantVal, LLVMTypeRef toType) returns LLVMValueRef = external;
//public function llvmConstSelect(LLVMValueRef constantCondition, LLVMValueRef constantIfTrue, LLVMValueRef constantIfFalse) returns LLVMValueRef = external;
//public function llvmConstExtractElement(LLVMValueRef vectorConstant, LLVMValueRef indexConstant) returns LLVMValueRef = external;
//public function llvmConstInsertElement(LLVMValueRef vectorConstant, LLVMValueRef elementValueConstant, LLVMValueRef indexConstant) returns LLVMValueRef = external;
//public function llvmConstShuffleVector(LLVMValueRef vectorAConstant, LLVMValueRef vectorBConstant, LLVMValueRef maskConstant) returns LLVMValueRef = external;
////public function llvmConstExtractValue(LLVMValueRef aggConstant, IntPointer idxList, int numIdx) returns LLVMValueRef = external;
////public function llvmConstExtractValue(LLVMValueRef aggConstant, IntBuffer idxList, int numIdx) returns LLVMValueRef = external;
////public function llvmConstExtractValue(LLVMValueRef aggConstant, int[] idxList, int numIdx) returns LLVMValueRef = external;
////public function llvmConstInsertValue(LLVMValueRef aggConstant, LLVMValueRef elementValueConstant, IntBuffer idxList, int numIdx) returns LLVMValueRef = external;
////public function llvmConstInsertValue(LLVMValueRef aggConstant, LLVMValueRef elementValueConstant, int[] idxList, int numIdx) returns LLVMValueRef = external;
////public function llvmConstInsertValue(LLVMValueRef aggConstant, LLVMValueRef elementValueConstant, IntPointer idxList, int numIdx) returns LLVMValueRef = external;
//public function llvmConstInlineAsm(LLVMTypeRef ty, string asmString, string constraints, int hasSideEffects, int isAlignStack) returns LLVMValueRef = external;
////public function llvmConstInlineAsm(LLVMTypeRef ty, BytePointer asmString, BytePointer constraints, int hasSideEffects, int isAlignStack) returns LLVMValueRef = external;
//public function llvmBlockAddress(LLVMValueRef f, LLVMBasicBlockRef bb) returns LLVMValueRef = external;
//public function llvmGetGlobalParent(LLVMValueRef global) returns LLVMModuleRef = external;
//public function llvmIsDeclaration(LLVMValueRef global) returns int = external;
//public function llvmGetLinkage(LLVMValueRef global) returns int = external;
//public function llvmSetLinkage(LLVMValueRef global, int linkage) = external;
//public function llvmGetSection(LLVMValueRef global) returns BytePointer = external;
//public function llvmSetSection(LLVMValueRef global, string section) = external;
////public function llvmSetSection(LLVMValueRef global, BytePointer section) = external;
//public function llvmGetVisibility(LLVMValueRef global) returns int = external;
//public function llvmSetVisibility(LLVMValueRef global, int viz) = external;
//public function llvmGetDLLStorageClass(LLVMValueRef global) returns int = external;
//public function llvmSetDLLStorageClass(LLVMValueRef global, int classValue) = external;
//public function llvmHasUnnamedAddr(LLVMValueRef global) returns int = external;
//public function llvmSetUnnamedAddr(LLVMValueRef global, int hasUnnamedAddr) = external;
//public function llvmGetAlignment(LLVMValueRef v) returns int = external;
//public function llvmSetAlignment(LLVMValueRef v, int bytes) = external;
////public function llvmAddGlobal(LLVMModuleRef m, LLVMTypeRef ty, BytePointer name) returns LLVMValueRef = external;
//public function llvmAddGlobal(LLVMModuleRef m, LLVMTypeRef ty, string name) returns LLVMValueRef = external;
//public function llvmAddGlobalInAddressSpace(LLVMModuleRef m, LLVMTypeRef ty, string name, int addressSpace) returns LLVMValueRef = external;
////public function llvmAddGlobalInAddressSpace(LLVMModuleRef m, LLVMTypeRef ty, BytePointer name, int addressSpace) returns LLVMValueRef = external;
//public function llvmGetNamedGlobal(LLVMModuleRef m, string name) returns LLVMValueRef = external;
////public function llvmGetNamedGlobal(LLVMModuleRef m, BytePointer name) returns LLVMValueRef = external;
//public function llvmGetFirstGlobal(LLVMModuleRef m) returns LLVMValueRef = external;
//public function llvmGetLastGlobal(LLVMModuleRef m) returns LLVMValueRef = external;
//public function llvmGetNextGlobal(LLVMValueRef globalVar) returns LLVMValueRef = external;
//public function llvmGetPreviousGlobal(LLVMValueRef globalVar) returns LLVMValueRef = external;
//public function llvmDeleteGlobal(LLVMValueRef globalVar) = external;
//public function llvmGetInitializer(LLVMValueRef globalVar) returns LLVMValueRef = external;
//public function llvmSetInitializer(LLVMValueRef globalVar, LLVMValueRef constantVal) = external;
//public function llvmIsThreadLocal(LLVMValueRef globalVar) returns int = external;
//public function llvmSetThreadLocal(LLVMValueRef globalVar, int isThreadLocal) = external;
//public function llvmIsGlobalConstant(LLVMValueRef globalVar) returns int = external;
//public function llvmSetGlobalConstant(LLVMValueRef globalVar, int isConstant) = external;
//public function llvmGetThreadLocalMode(LLVMValueRef globalVar) returns int = external;
//public function llvmSetThreadLocalMode(LLVMValueRef globalVar, int mode) = external;
//public function llvmIsExternallyInitialized(LLVMValueRef globalVar) returns int = external;
//public function llvmSetExternallyInitialized(LLVMValueRef globalVar, int isExtInit) = external;
//public function llvmAddAlias(LLVMModuleRef m, LLVMTypeRef ty, LLVMValueRef aliasee, string name) returns LLVMValueRef = external;
////public function llvmAddAlias(LLVMModuleRef m, LLVMTypeRef ty, LLVMValueRef aliasee, BytePointer name) returns LLVMValueRef = external;
//public function llvmDeleteFunction(LLVMValueRef fn) = external;
//public function llvmHasPersonalityFn(LLVMValueRef fn) returns int = external;
//public function llvmGetPersonalityFn(LLVMValueRef fn) returns LLVMValueRef = external;
//public function llvmSetPersonalityFn(LLVMValueRef fn, LLVMValueRef personalityFn) = external;
//public function llvmGetIntrinsicID(LLVMValueRef fn) returns int = external;
//public function llvmGetFunctionCallConv(LLVMValueRef fn) returns int = external;
//public function llvmSetFunctionCallConv(LLVMValueRef fn, int cc) = external;
//public function llvmGetGC(LLVMValueRef fn) returns BytePointer = external;
////public function llvmSetGC(LLVMValueRef fn, BytePointer name) = external;
//public function llvmSetGC(LLVMValueRef fn, string name) = external;
//public function llvmAddAttributeAtIndex(LLVMValueRef f, int idx, LLVMAttributeRef a) = external;
//public function llvmGetAttributeCountAtIndex(LLVMValueRef f, int idx) returns int = external;
//public function llvmGetAttributesAtIndex0(LLVMValueRef f, int idx, PointerPointer attrs) = external;
//public function llvmGetAttributesAtIndex1(LLVMValueRef f, int idx, LLVMAttributeRef attrs) = external;
//public function llvmGetEnumAttributeAtIndex(LLVMValueRef f, int idx, int kindID) returns LLVMAttributeRef = external;
////public function llvmGetStringAttributeAtIndex(LLVMValueRef f, int idx, BytePointer k, int kLen) returns LLVMAttributeRef = external;
//public function llvmGetStringAttributeAtIndex(LLVMValueRef f, int idx, string k, int kLen) returns LLVMAttributeRef = external;
//public function llvmRemoveEnumAttributeAtIndex(LLVMValueRef f, int idx, int kindID) = external;
////public function llvmRemoveStringAttributeAtIndex(LLVMValueRef f, int idx, BytePointer k, int kLen) = external;
//public function llvmRemoveStringAttributeAtIndex(LLVMValueRef f, int idx, string k, int kLen) = external;
//public function llvmAddTargetDependentFunctionAttr(LLVMValueRef fn, string a, string v) = external;
////public function llvmAddTargetDependentFunctionAttr(LLVMValueRef fn, BytePointer a, BytePointer v) = external;
//public function llvmCountParams(LLVMValueRef fn) returns int = external;
//public function llvmGetParams0(LLVMValueRef fn, PointerPointer params) = external;
//public function llvmGetParams1(LLVMValueRef fn, LLVMValueRef params) = external;
public function llvmGetParam(LLVMValueRef fn, int index) returns LLVMValueRef = external;
//public function llvmGetParamParent(LLVMValueRef inst) returns LLVMValueRef = external;
//public function llvmGetFirstParam(LLVMValueRef fn) returns LLVMValueRef = external;
//public function llvmGetLastParam(LLVMValueRef fn) returns LLVMValueRef = external;
//public function llvmGetNextParam(LLVMValueRef arg) returns LLVMValueRef = external;
//public function llvmGetPreviousParam(LLVMValueRef arg) returns LLVMValueRef = external;
//public function llvmSetParamAlignment(LLVMValueRef arg, int align) = external;
////public function llvmMDStringInContext(LLVMContextRef c, BytePointer str, int sLen) returns LLVMValueRef = external;
//public function llvmMDStringInContext(LLVMContextRef c, string str, int sLen) returns LLVMValueRef = external;
////public function llvmMDString(BytePointer str, int sLen) returns LLVMValueRef = external;
//public function llvmMDString(string str, int sLen) returns LLVMValueRef = external;
//public function llvmMDNodeInContext0(LLVMContextRef c, PointerPointer vals, int count) returns LLVMValueRef = external;
//public function llvmMDNodeInContext1(LLVMContextRef c, LLVMValueRef vals, int count) returns LLVMValueRef = external;
//public function llvmMDNode0(LLVMValueRef vals, int count) returns LLVMValueRef = external;
//public function llvmMDNode1(PointerPointer vals, int count) returns LLVMValueRef = external;
//public function llvmMetadataAsValue(LLVMContextRef c, LLVMMetadataRef md) returns LLVMValueRef = external;
//public function llvmValueAsMetadata(LLVMValueRef val) returns LLVMMetadataRef = external;
////public function llvmGetMDString(LLVMValueRef v, int[] length) returns BytePointer = external;
////public function llvmGetMDString(LLVMValueRef v, IntPointer length) returns BytePointer = external;
////public function llvmGetMDString(LLVMValueRef v, IntBuffer length) returns string = external;
//public function llvmGetMDNodeNumOperands(LLVMValueRef v) returns int = external;
//public function llvmGetMDNodeOperands0(LLVMValueRef v, LLVMValueRef dest) = external;
//public function llvmGetMDNodeOperands1(LLVMValueRef v, PointerPointer dest) = external;
//public function llvmBasicBlockAsValue(LLVMBasicBlockRef bb) returns LLVMValueRef = external;
//public function llvmValueIsBasicBlock(LLVMValueRef val) returns int = external;
//public function llvmValueAsBasicBlock(LLVMValueRef val) returns LLVMBasicBlockRef = external;
//public function llvmGetBasicBlockName(LLVMBasicBlockRef bb) returns BytePointer = external;
//public function llvmGetBasicBlockParent(LLVMBasicBlockRef bb) returns LLVMValueRef = external;
//public function llvmGetBasicBlockTerminator(LLVMBasicBlockRef bb) returns LLVMValueRef = external;
//public function llvmCountBasicBlocks(LLVMValueRef fn) returns int = external;
//public function llvmGetBasicBlocks0(LLVMValueRef fn, LLVMBasicBlockRef basicBlocks) = external;
//public function llvmGetBasicBlocks1(LLVMValueRef fn, PointerPointer basicBlocks) = external;
//public function llvmGetFirstBasicBlock(LLVMValueRef fn) returns LLVMBasicBlockRef = external;
//public function llvmGetLastBasicBlock(LLVMValueRef fn) returns LLVMBasicBlockRef = external;
//public function llvmGetNextBasicBlock(LLVMBasicBlockRef bb) returns LLVMBasicBlockRef = external;
//public function llvmGetPreviousBasicBlock(LLVMBasicBlockRef bb) returns LLVMBasicBlockRef = external;
//public function llvmGetEntryBasicBlock(LLVMValueRef fn) returns LLVMBasicBlockRef = external;
////public function llvmAppendBasicBlockInContext(LLVMContextRef c, LLVMValueRef fn, BytePointer name) returns LLVMBasicBlockRef = external;
//public function llvmAppendBasicBlockInContext(LLVMContextRef c, LLVMValueRef fn, string name) returns LLVMBasicBlockRef = external;
////public function llvmAppendBasicBlock(LLVMValueRef fn, BytePointer name) returns LLVMBasicBlockRef = external;
public function llvmAppendBasicBlock(LLVMValueRef fn, string name) returns LLVMBasicBlockRef = external;
////public function llvmInsertBasicBlockInContext(LLVMContextRef c, LLVMBasicBlockRef bb, BytePointer name) returns LLVMBasicBlockRef = external;
//public function llvmInsertBasicBlockInContext(LLVMContextRef c, LLVMBasicBlockRef bb, string name) returns LLVMBasicBlockRef = external;
//public function llvmInsertBasicBlock(LLVMBasicBlockRef insertBeforeBB, string name) returns LLVMBasicBlockRef = external;
////public function llvmInsertBasicBlock(LLVMBasicBlockRef insertBeforeBB, BytePointer name) returns LLVMBasicBlockRef = external;
//public function llvmDeleteBasicBlock(LLVMBasicBlockRef bb) = external;
//public function llvmRemoveBasicBlockFromParent(LLVMBasicBlockRef bb) = external;
//public function llvmMoveBasicBlockBefore(LLVMBasicBlockRef bb, LLVMBasicBlockRef movePos) = external;
//public function llvmMoveBasicBlockAfter(LLVMBasicBlockRef bb, LLVMBasicBlockRef movePos) = external;
//public function llvmGetFirstInstruction(LLVMBasicBlockRef bb) returns LLVMValueRef = external;
//public function llvmGetLastInstruction(LLVMBasicBlockRef bb) returns LLVMValueRef = external;
//public function llvmHasMetadata(LLVMValueRef val) returns int = external;
//public function llvmGetMetadata(LLVMValueRef val, int kindID) returns LLVMValueRef = external;
//public function llvmSetMetadata(LLVMValueRef val, int kindID, LLVMValueRef node) = external;
//public function llvmGetInstructionParent(LLVMValueRef inst) returns LLVMBasicBlockRef = external;
//public function llvmGetNextInstruction(LLVMValueRef inst) returns LLVMValueRef = external;
//public function llvmGetPreviousInstruction(LLVMValueRef inst) returns LLVMValueRef = external;
//public function llvmInstructionRemoveFromParent(LLVMValueRef inst) = external;
//public function llvmInstructionEraseFromParent(LLVMValueRef inst) = external;
//public function llvmGetInstructionOpcode(LLVMValueRef inst) returns int = external;
//public function llvmGetICmpPredicate(LLVMValueRef inst) returns int = external;
//public function llvmGetFCmpPredicate(LLVMValueRef inst) returns int = external;
//public function llvmInstructionClone(LLVMValueRef inst) returns LLVMValueRef = external;
//public function llvmGetNumArgOperands(LLVMValueRef instr) returns int = external;
//public function llvmSetInstructionCallConv(LLVMValueRef instr, int cc) = external;
//public function llvmGetInstructionCallConv(LLVMValueRef instr) returns int = external;
//public function llvmSetInstrParamAlignment(LLVMValueRef instr, int index, int align) = external;
//public function llvmAddCallSiteAttribute(LLVMValueRef c, int idx, LLVMAttributeRef a) = external;
//public function llvmGetCallSiteAttributeCount(LLVMValueRef c, int idx) returns int = external;
//public function llvmGetCallSiteAttributes0(LLVMValueRef c, int idx, PointerPointer attrs) = external;
//public function llvmGetCallSiteAttributes1(LLVMValueRef c, int idx, LLVMAttributeRef attrs) = external;
//public function llvmGetCallSiteEnumAttribute(LLVMValueRef c, int idx, int kindID) returns LLVMAttributeRef = external;
//public function llvmGetCallSiteStringAttribute(LLVMValueRef c, int idx, string k, int kLen) returns LLVMAttributeRef = external;
////public function llvmGetCallSiteStringAttribute(LLVMValueRef c, int idx, BytePointer k, int kLen) returns LLVMAttributeRef = external;
//public function llvmRemoveCallSiteEnumAttribute(LLVMValueRef c, int idx, int kindID) = external;
////public function llvmRemoveCallSiteStringAttribute(LLVMValueRef c, int idx, BytePointer k, int kLen) = external;
//public function llvmRemoveCallSiteStringAttribute(LLVMValueRef c, int idx, string k, int kLen) = external;
//public function llvmGetCalledValue(LLVMValueRef instr) returns LLVMValueRef = external;
//public function llvmIsTailCall(LLVMValueRef callInst) returns int = external;
//public function llvmSetTailCall(LLVMValueRef callInst, int isTailCall) = external;
//public function llvmGetNormalDest(LLVMValueRef invokeInst) returns LLVMBasicBlockRef = external;
//public function llvmGetUnwindDest(LLVMValueRef invokeInst) returns LLVMBasicBlockRef = external;
//public function llvmSetNormalDest(LLVMValueRef invokeInst, LLVMBasicBlockRef b) = external;
//public function llvmSetUnwindDest(LLVMValueRef invokeInst, LLVMBasicBlockRef b) = external;
//public function llvmGetNumSuccessors(LLVMValueRef term) returns int = external;
//public function llvmGetSuccessor(LLVMValueRef term, int i) returns LLVMBasicBlockRef = external;
//public function llvmSetSuccessor(LLVMValueRef term, int i, LLVMBasicBlockRef block) = external;
//public function llvmIsConditional(LLVMValueRef branch) returns int = external;
//public function llvmGetCondition(LLVMValueRef branch) returns LLVMValueRef = external;
//public function llvmSetCondition(LLVMValueRef branch, LLVMValueRef cond) = external;
//public function llvmGetSwitchDefaultDest(LLVMValueRef switchInstr) returns LLVMBasicBlockRef = external;
//public function llvmGetAllocatedType(LLVMValueRef alloca) returns LLVMTypeRef = external;
//public function llvmIsInBounds(LLVMValueRef gep) returns int = external;
//public function llvmSetIsInBounds(LLVMValueRef gep, int inBounds) = external;
//public function llvmAddIncoming0(LLVMValueRef phiNode, LLVMValueRef incomingValues, LLVMBasicBlockRef incomingBlocks, int count) = external;
//public function llvmAddIncoming1(LLVMValueRef phiNode, PointerPointer incomingValues, PointerPointer incomingBlocks, int count) = external;
//public function llvmCountIncoming(LLVMValueRef phiNode) returns int = external;
//public function llvmGetIncomingValue(LLVMValueRef phiNode, int index) returns LLVMValueRef = external;
//public function llvmGetIncomingBlock(LLVMValueRef phiNode, int index) returns LLVMBasicBlockRef = external;
//public function llvmGetNumIndices(LLVMValueRef inst) returns int = external;
//public function llvmGetIndices(LLVMValueRef inst) returns IntPointer = external;
//public function llvmCreateBuilderInContext(LLVMContextRef c) returns LLVMBuilderRef = external;
public function llvmCreateBuilder() returns LLVMBuilderRef = external;
//public function llvmPositionBuilder(LLVMBuilderRef builder, LLVMBasicBlockRef block, LLVMValueRef instr) = external;
//public function llvmPositionBuilderBefore(LLVMBuilderRef builder, LLVMValueRef instr) = external;
public function llvmPositionBuilderAtEnd(LLVMBuilderRef builder, LLVMBasicBlockRef block) = external;
//public function llvmGetInsertBlock(LLVMBuilderRef builder) returns LLVMBasicBlockRef = external;
//public function llvmClearInsertionPosition(LLVMBuilderRef builder) = external;
//public function llvmInsertIntoBuilder(LLVMBuilderRef builder, LLVMValueRef instr) = external;
//public function llvmInsertIntoBuilderWithName(LLVMBuilderRef builder, LLVMValueRef instr, string name) = external;
////public function llvmInsertIntoBuilderWithName(LLVMBuilderRef builder, LLVMValueRef instr, BytePointer name) = external;
public function llvmDisposeBuilder(LLVMBuilderRef builder) = external;
//public function llvmSetCurrentDebugLocation(LLVMBuilderRef builder, LLVMValueRef l) = external;
//public function llvmGetCurrentDebugLocation(LLVMBuilderRef builder) returns LLVMValueRef = external;
//public function llvmSetInstDebugLocation(LLVMBuilderRef builder, LLVMValueRef inst) = external;
public function llvmBuildRetVoid(LLVMBuilderRef arg0) returns LLVMValueRef = external;
public function llvmBuildRet(LLVMBuilderRef arg0, LLVMValueRef v) returns LLVMValueRef = external;
//public function llvmBuildAggregateRet0(LLVMBuilderRef arg0, PointerPointer retVals, int n) returns LLVMValueRef = external;
//public function llvmBuildAggregateRet1(LLVMBuilderRef arg0, LLVMValueRef retVals, int n) returns LLVMValueRef = external;
public function llvmBuildBr(LLVMBuilderRef arg0, LLVMBasicBlockRef dest) returns LLVMValueRef = external;
public function llvmBuildCondBr(LLVMBuilderRef arg0, LLVMValueRef ifValue, LLVMBasicBlockRef then, LLVMBasicBlockRef elseValue) returns LLVMValueRef = external;
//public function llvmBuildSwitch(LLVMBuilderRef arg0, LLVMValueRef v, LLVMBasicBlockRef elseValue, int numCases) returns LLVMValueRef = external;
//public function llvmBuildIndirectBr(LLVMBuilderRef b, LLVMValueRef addr, int numDests) returns LLVMValueRef = external;
////public function llvmBuildInvoke(LLVMBuilderRef arg0, LLVMValueRef fn, LLVMValueRef args, int numArgs, LLVMBasicBlockRef then, LLVMBasicBlockRef catchValue, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildInvoke(LLVMBuilderRef arg0, LLVMValueRef fn, PointerPointer args, int numArgs, LLVMBasicBlockRef then, LLVMBasicBlockRef catchValue, string name) returns LLVMValueRef = external;
//public function llvmBuildLandingPad(LLVMBuilderRef b, LLVMTypeRef ty, LLVMValueRef persFn, int numClauses, string name) returns LLVMValueRef = external;
////public function llvmBuildLandingPad(LLVMBuilderRef b, LLVMTypeRef ty, LLVMValueRef persFn, int numClauses, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildResume(LLVMBuilderRef b, LLVMValueRef exn) returns LLVMValueRef = external;
//public function llvmBuildUnreachable(LLVMBuilderRef arg0) returns LLVMValueRef = external;
//public function llvmAddCase(LLVMValueRef switchValue, LLVMValueRef onVal, LLVMBasicBlockRef dest) = external;
//public function llvmAddDestination(LLVMValueRef indirectBr, LLVMBasicBlockRef dest) = external;
//public function llvmGetNumClauses(LLVMValueRef landingPad) returns int = external;
//public function llvmGetClause(LLVMValueRef landingPad, int idx) returns LLVMValueRef = external;
//public function llvmAddClause(llvmValueRef landingPad, LLVMValueRef clauseVal) = external;
//public function llvmIsCleanup(LLVMValueRef landingPad) returns int = external;
//public function llvmSetCleanup(LLVMValueRef landingPad, int val) = external;
public function llvmBuildAdd(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef = external;
////public function llvmBuildAdd(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef = external;
////public function llvmBuildNSWAdd(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildNSWAdd(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef = external;
//public function llvmBuildNUWAdd(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef = external;
////public function llvmBuildNUWAdd(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef = external;
////public function llvmBuildFAdd(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildFAdd(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef = external;
////public function llvmBuildSub(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef = external;
public function llvmBuildSub(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef = external;
////public function llvmBuildNSWSub(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildNSWSub(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef = external;
////public function llvmBuildNUWSub(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildNUWSub(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef = external;
////public function llvmBuildFSub(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildFSub(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef = external;
////public function llvmBuildMul(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef = external;
public function llvmBuildMul(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef = external;
////public function llvmBuildNSWMul(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildNSWMul(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef = external;
////public function llvmBuildNUWMul(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildNUWMul(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef = external;
//public function llvmBuildFMul(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef = external;
////public function llvmBuildFMul(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildUDiv(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef = external;
////public function llvmBuildUDiv(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildExactUDiv(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef = external;
////public function llvmBuildExactUDiv(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef = external;
////public function llvmBuildSDiv(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef = external;
public function llvmBuildSDiv(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef = external;
//public function llvmBuildExactSDiv(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef = external;
////public function llvmBuildExactSDiv(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef = external;
////public function llvmBuildFDiv(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildFDiv(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef = external;
//public function llvmBuildURem(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef = external;
////public function llvmBuildURem(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildSRem(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef = external;
////public function llvmBuildSRem(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef = external;
////public function llvmBuildFRem(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildFRem(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef = external;
////public function llvmBuildShl(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildShl(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef = external;
////public function llvmBuildLShr(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildLShr(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef = external;
//public function llvmBuildAShr(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef = external;
////public function llvmBuildAShr(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef = external;
////public function llvmBuildAnd(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildAnd(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef = external;
//public function llvmBuildOr(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef = external;
////public function llvmBuildOr(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef = external;
////public function llvmBuildXor(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildXor(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef = external;
//public function llvmBuildBinOp(LLVMBuilderRef b, int op, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef = external;
////public function llvmBuildBinOp(LLVMBuilderRef b, int op, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef = external;
////public function llvmBuildNeg(LLVMBuilderRef arg0, LLVMValueRef v, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildNeg(LLVMBuilderRef arg0, LLVMValueRef v, string name) returns LLVMValueRef = external;
////public function llvmBuildNSWNeg(LLVMBuilderRef b, LLVMValueRef v, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildNSWNeg(LLVMBuilderRef b, LLVMValueRef v, string name) returns LLVMValueRef = external;
////public function llvmBuildNUWNeg(LLVMBuilderRef b, LLVMValueRef v, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildNUWNeg(LLVMBuilderRef b, LLVMValueRef v, string name) returns LLVMValueRef = external;
////public function llvmBuildFNeg(LLVMBuilderRef arg0, LLVMValueRef v, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildFNeg(LLVMBuilderRef arg0, LLVMValueRef v, string name) returns LLVMValueRef = external;
//public function llvmBuildNot(LLVMBuilderRef arg0, LLVMValueRef v, string name) returns LLVMValueRef = external;
////public function llvmBuildNot(LLVMBuilderRef arg0, LLVMValueRef v, BytePointer name) returns LLVMValueRef = external;
////public function llvmBuildMalloc(LLVMBuilderRef arg0, LLVMTypeRef ty, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildMalloc(LLVMBuilderRef arg0, LLVMTypeRef ty, string name) returns LLVMValueRef = external;
//public function llvmBuildArrayMalloc(LLVMBuilderRef arg0, LLVMTypeRef ty, LLVMValueRef val, string name) returns LLVMValueRef = external;
////public function llvmBuildArrayMalloc(LLVMBuilderRef arg0, LLVMTypeRef ty, LLVMValueRef val, BytePointer name) returns LLVMValueRef = external;
////public function llvmBuildAlloca(LLVMBuilderRef arg0, LLVMTypeRef ty, BytePointer name) returns LLVMValueRef = external;
public function llvmBuildAlloca(LLVMBuilderRef arg0, LLVMTypeRef ty, string name) returns LLVMValueRef = external;
//public function llvmBuildArrayAlloca(LLVMBuilderRef arg0, LLVMTypeRef ty, LLVMValueRef val, string name) returns LLVMValueRef = external;
////public function llvmBuildArrayAlloca(LLVMBuilderRef arg0, LLVMTypeRef ty, LLVMValueRef val, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildFree(LLVMBuilderRef arg0, LLVMValueRef pointerVal) returns LLVMValueRef = external;
////public function llvmBuildLoad(LLVMBuilderRef arg0, LLVMValueRef pointerVal, BytePointer name) returns LLVMValueRef = external;
public function llvmBuildLoad(LLVMBuilderRef arg0, LLVMValueRef pointerVal, string name) returns LLVMValueRef = external;
public function llvmBuildStore(LLVMBuilderRef arg0, LLVMValueRef val, LLVMValueRef ptr) returns LLVMValueRef = external;
//public function llvmBuildGEP(LLVMBuilderRef b, LLVMValueRef pointer, PointerPointer indices, int numIndices, string name) returns LLVMValueRef = external;
////public function llvmBuildGEP(LLVMBuilderRef b, LLVMValueRef pointer, LLVMValueRef indices, int numIndices, BytePointer name) returns LLVMValueRef = external;
////public function llvmBuildInBoundsGEP(LLVMBuilderRef b, LLVMValueRef pointer, LLVMValueRef indices, int numIndices, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildInBoundsGEP(LLVMBuilderRef b, LLVMValueRef pointer, PointerPointer indices, int numIndices, string name) returns LLVMValueRef = external;
public function llvmBuildStructGEP(LLVMBuilderRef b, LLVMValueRef pointer, int idx, string name) returns LLVMValueRef = external;
////public function llvmBuildStructGEP(LLVMBuilderRef b, LLVMValueRef pointer, int idx, BytePointer name) returns LLVMValueRef = external;
////public function llvmBuildGlobalString(LLVMBuilderRef b, BytePointer str, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildGlobalString(LLVMBuilderRef b, string str, string name) returns LLVMValueRef = external;
////public function llvmBuildGlobalStringPtr(LLVMBuilderRef b, BytePointer str, BytePointer name) returns LLVMValueRef = external;
public function llvmBuildGlobalStringPtr(LLVMBuilderRef b, string str, string name) returns LLVMValueRef = external;
//public function llvmGetVolatile(LLVMValueRef memoryAccessInst) returns int = external;
//public function llvmSetVolatile(LLVMValueRef memoryAccessInst, int isVolatile) = external;
//public function llvmGetOrdering(LLVMValueRef memoryAccessInst) returns int = external;
//public function llvmSetOrdering(LLVMValueRef memoryAccessInst, int ordering) = external;
//public function llvmBuildTrunc(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef = external;
////public function llvmBuildTrunc(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef = external;
////public function llvmBuildZExt(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildZExt(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef = external;
////public function llvmBuildSExt(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildSExt(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef = external;
//public function llvmBuildFPToUI(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef = external;
////public function llvmBuildFPToUI(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildFPToSI(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef = external;
////public function llvmBuildFPToSI(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef = external;
////public function llvmBuildUIToFP(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildUIToFP(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef = external;
////public function llvmBuildSIToFP(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildSIToFP(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef = external;
//public function llvmBuildFPTrunc(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef = external;
////public function llvmBuildFPTrunc(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildFPExt(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef = external;
////public function llvmBuildFPExt(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef = external;
////public function llvmBuildPtrToInt(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildPtrToInt(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef = external;
////public function llvmBuildIntToPtr(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildIntToPtr(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef = external;
public function llvmBuildBitCast(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef = external;
////public function llvmBuildBitCast(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef = external;
////public function llvmBuildAddrSpaceCast(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildAddrSpaceCast(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef = external;
//public function llvmBuildZExtOrBitCast(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef = external;
////public function llvmBuildZExtOrBitCast(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef = external;
////public function llvmBuildSExtOrBitCast(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildSExtOrBitCast(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef = external;
//public function llvmBuildTruncOrBitCast(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef = external;
////public function llvmBuildTruncOrBitCast(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef = external;
////public function llvmBuildCast(LLVMBuilderRef b, int op, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildCast(LLVMBuilderRef b, int op, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef = external;
////public function llvmBuildPointerCast(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildPointerCast(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef = external;
////public function llvmBuildIntCast(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildIntCast(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef = external;
////public function llvmBuildFPCast(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildFPCast(LLVMBuilderRef arg0, LLVMValueRef val, LLVMTypeRef destTy, string name) returns LLVMValueRef = external;
////public function llvmBuildICmp(LLVMBuilderRef arg0, int op, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef = external;
public function llvmBuildICmp(LLVMBuilderRef arg0, int op, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef = external;
//public function llvmBuildFCmp(LLVMBuilderRef arg0, int op, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef = external;
////public function llvmBuildFCmp(LLVMBuilderRef arg0, int op, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildPhi(LLVMBuilderRef arg0, LLVMTypeRef ty, string name) returns LLVMValueRef = external;
////public function llvmBuildPhi(LLVMBuilderRef arg0, LLVMTypeRef ty, BytePointer name) returns LLVMValueRef = external;
////public function llvmBuildCall(LLVMBuilderRef arg0, LLVMValueRef fn, PointerPointer args, int numArgs, string name) returns LLVMValueRef = external;
public function llvmBuildCall(LLVMBuilderRef arg0, LLVMValueRef fn, LLVMValueRef[] args, int numArgs, string name) returns LLVMValueRef = external;
////public function llvmBuildSelect(LLVMBuilderRef arg0, LLVMValueRef ifValue, LLVMValueRef then, LLVMValueRef elseValue, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildSelect(LLVMBuilderRef arg0, LLVMValueRef ifValue, LLVMValueRef then, LLVMValueRef elseValue, string name) returns LLVMValueRef = external;
//public function llvmBuildVAArg(LLVMBuilderRef arg0, LLVMValueRef list, LLVMTypeRef ty, string name) returns LLVMValueRef = external;
////public function llvmBuildVAArg(LLVMBuilderRef arg0, LLVMValueRef list, LLVMTypeRef ty, BytePointer name) returns LLVMValueRef = external;
////public function llvmBuildExtractElement(LLVMBuilderRef arg0, LLVMValueRef vecVal, LLVMValueRef index, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildExtractElement(LLVMBuilderRef arg0, LLVMValueRef vecVal, LLVMValueRef index, string name) returns LLVMValueRef = external;
//public function llvmBuildInsertElement(LLVMBuilderRef arg0, LLVMValueRef vecVal, LLVMValueRef eltVal, LLVMValueRef index, string name) returns LLVMValueRef = external;
////public function llvmBuildInsertElement(LLVMBuilderRef arg0, LLVMValueRef vecVal, LLVMValueRef eltVal, LLVMValueRef index, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildShuffleVector(LLVMBuilderRef arg0, LLVMValueRef v1, LLVMValueRef v2, LLVMValueRef mask, string name) returns LLVMValueRef = external;
////public function llvmBuildShuffleVector(LLVMBuilderRef arg0, LLVMValueRef v1, LLVMValueRef v2, LLVMValueRef mask, BytePointer name) returns LLVMValueRef = external;
////public function llvmBuildExtractValue(LLVMBuilderRef arg0, LLVMValueRef aggVal, int index, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildExtractValue(LLVMBuilderRef arg0, LLVMValueRef aggVal, int index, string name) returns LLVMValueRef = external;
//public function llvmBuildInsertValue(LLVMBuilderRef arg0, LLVMValueRef aggVal, LLVMValueRef eltVal, int index, string name) returns LLVMValueRef = external;
////public function llvmBuildInsertValue(LLVMBuilderRef arg0, LLVMValueRef aggVal, LLVMValueRef eltVal, int index, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildIsNull(LLVMBuilderRef arg0, LLVMValueRef val, string name) returns LLVMValueRef = external;
////public function llvmBuildIsNull(LLVMBuilderRef arg0, LLVMValueRef val, BytePointer name) returns LLVMValueRef = external;
////public function llvmBuildIsNotNull(LLVMBuilderRef arg0, LLVMValueRef val, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildIsNotNull(LLVMBuilderRef arg0, LLVMValueRef val, string name) returns LLVMValueRef = external;
////public function llvmBuildPtrDiff(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildPtrDiff(LLVMBuilderRef arg0, LLVMValueRef lhs, LLVMValueRef rhs, string name) returns LLVMValueRef = external;
//public function llvmBuildFence(LLVMBuilderRef b, int ordering, int singleThread, string name) returns LLVMValueRef = external;
////public function llvmBuildFence(LLVMBuilderRef b, int ordering, int singleThread, BytePointer name) returns LLVMValueRef = external;
//public function llvmBuildAtomicRMW(LLVMBuilderRef b, int op, LLVMValueRef ptr, LLVMValueRef val, int ordering, int singleThread) returns LLVMValueRef = external;
//public function llvmBuildAtomicCmpXchg(LLVMBuilderRef b, LLVMValueRef ptr, LLVMValueRef cmp, LLVMValueRef newValue, int successOrdering, int failureOrdering, int singleThread) returns LLVMValueRef = external;
//public function llvmIsAtomicSingleThread(LLVMValueRef atomicInst) returns int = external;
//public function llvmSetAtomicSingleThread(LLVMValueRef atomicInst, int singleThread) = external;
//public function llvmGetCmpXchgSuccessOrdering(LLVMValueRef cmpXchgInst) returns int = external;
//public function llvmSetCmpXchgSuccessOrdering(LLVMValueRef cmpXchgInst, int ordering) = external;
//public function llvmGetCmpXchgFailureOrdering(LLVMValueRef cmpXchgInst) returns int = external;
//public function llvmSetCmpXchgFailureOrdering(LLVMValueRef cmpXchgInst, int ordering) = external;
//public function llvmCreateModuleProviderForExistingModule(LLVMModuleRef m) returns LLVMModuleProviderRef = external;
//public function llvmDisposeModuleProvider(LLVMModuleProviderRef m) = external;
////public function llvmCreateMemoryBufferWithContentsOfFile(string path, PointerPointer outMemBuf, ByteBuffer outMessage) returns int = external;
////public function llvmCreateMemoryBufferWithContentsOfFile(BytePointer path, LLVMMemoryBufferRef outMemBuf, byte[] outMessage) returns int = external;
////public function llvmCreateMemoryBufferWithContentsOfFile(string path, PointerPointer outMemBuf, BytePointer outMessage) returns int = external;
////public function llvmCreateMemoryBufferWithContentsOfFile(BytePointer path, LLVMMemoryBufferRef outMemBuf, ByteBuffer outMessage) returns int = external;
////public function llvmCreateMemoryBufferWithContentsOfFile(string path, PointerPointer outMemBuf, byte[] outMessage) returns int = external;
////public function llvmCreateMemoryBufferWithContentsOfFile(BytePointer path, LLVMMemoryBufferRef outMemBuf, PointerPointer outMessage) returns int = external;
////public function llvmCreateMemoryBufferWithContentsOfFile(BytePointer path, LLVMMemoryBufferRef outMemBuf, BytePointer outMessage) returns int = external;
////public function llvmCreateMemoryBufferWithSTDIN0(LLVMMemoryBufferRef outMemBuf, byte[] outMessage) returns int = external;
////public function llvmCreateMemoryBufferWithSTDIN(PointerPointer outMemBuf, BytePointer outMessage) returns int = external;
////public function llvmCreateMemoryBufferWithSTDIN(LLVMMemoryBufferRef outMemBuf, ByteBuffer outMessage) returns int = external;
////public function llvmCreateMemoryBufferWithSTDIN1(PointerPointer outMemBuf, byte[] outMessage) returns int = external;
//public function llvmCreateMemoryBufferWithSTDIN2(LLVMMemoryBufferRef outMemBuf, PointerPointer outMessage) returns int = external;
////public function llvmCreateMemoryBufferWithSTDIN(LLVMMemoryBufferRef outMemBuf, BytePointer outMessage) returns int = external;
////public function llvmCreateMemoryBufferWithSTDIN(PointerPointer outMemBuf, ByteBuffer outMessage) returns int = external;
////public function llvmCreateMemoryBufferWithMemoryRange(BytePointer inputData, int inputDataLength, BytePointer bufferName, int requiresNullTerminator) returns LLVMMemoryBufferRef = external;
//public function llvmCreateMemoryBufferWithMemoryRange(string inputData, int inputDataLength, string bufferName, int requiresNullTerminator) returns LLVMMemoryBufferRef = external;
//public function llvmCreateMemoryBufferWithMemoryRangeCopy(string inputData, int inputDataLength, string bufferName) returns LLVMMemoryBufferRef = external;
////public function llvmCreateMemoryBufferWithMemoryRangeCopy(BytePointer inputData, int inputDataLength, BytePointer bufferName) returns LLVMMemoryBufferRef = external;
//public function llvmGetBufferStart(LLVMMemoryBufferRef memBuf) returns BytePointer = external;
//public function llvmGetBufferSize(LLVMMemoryBufferRef memBuf) returns int = external;
//public function llvmDisposeMemoryBuffer(LLVMMemoryBufferRef memBuf) = external;
//public function llvmGetGlobalPassRegistry() returns LLVMPassRegistryRef = external;
public function llvmCreatePassManager() returns LLVMPassManagerRef = external;
//public function llvmCreateFunctionPassManagerForModule(LLVMModuleRef m) returns LLVMPassManagerRef = external;
//public function llvmCreateFunctionPassManager(LLVMModuleProviderRef mp) returns LLVMPassManagerRef = external;
public function llvmRunPassManager(LLVMPassManagerRef pm, LLVMModuleRef m) returns int = external;
//public function llvmInitializeFunctionPassManager(LLVMPassManagerRef fpm) returns int = external;
//public function llvmRunFunctionPassManager(LLVMPassManagerRef fpm, LLVMValueRef f) returns int = external;
//public function llvmFinalizeFunctionPassManager(LLVMPassManagerRef fpm) returns int = external;
public function llvmDisposePassManager(LLVMPassManagerRef pm) = external;
//public function llvmStartMultithreaded() returns int = external;
//public function llvmStopMultithreaded() = external;
//public function llvmIsMultithreaded() returns int = external;
////public function llvmVerifyModule(LLVMModuleRef m, int action, ByteBuffer outMessage) returns int = external;
////public function llvmVerifyModule0(LLVMModuleRef m, int action, byte[] outMessage) returns int = external;
////public function llvmVerifyModule(LLVMModuleRef m, int action, BytePointer outMessage) returns int = external;
//public function llvmVerifyModule1(LLVMModuleRef m, int action, PointerPointer outMessage) returns int = external;
//public function llvmVerifyFunction(LLVMValueRef fn, int action) returns int = external;
//public function llvmViewFunctionCFG(LLVMValueRef fn) = external;
//public function llvmViewFunctionCFGOnly(LLVMValueRef fn) = external;
////public function llvmParseBitcode(LLVMMemoryBufferRef memBuf, PointerPointer outModule, ByteBuffer outMessage) returns int = external;
////public function llvmParseBitcode(LLVMMemoryBufferRef memBuf, PointerPointer outModule, BytePointer outMessage) returns int = external;
////public function llvmParseBitcode(LLVMMemoryBufferRef memBuf, LLVMModuleRef outModule, ByteBuffer outMessage) returns int = external;
////public function llvmParseBitcode0(LLVMMemoryBufferRef memBuf, PointerPointer outModule, byte[] outMessage) returns int = external;
//public function llvmParseBitcode1(LLVMMemoryBufferRef memBuf, LLVMModuleRef outModule, PointerPointer outMessage) returns int = external;
////public function llvmParseBitcode(LLVMMemoryBufferRef memBuf, LLVMModuleRef outModule, BytePointer outMessage) returns int = external;
////public function llvmParseBitcode2(LLVMMemoryBufferRef memBuf, LLVMModuleRef outModule, byte[] outMessage) returns int = external;
//public function llvmParseBitcode20(LLVMMemoryBufferRef memBuf, LLVMModuleRef outModule) returns int = external;
//public function llvmParseBitcode21(LLVMMemoryBufferRef memBuf, PointerPointer outModule) returns int = external;
////public function llvmParseBitcodeInContext(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, PointerPointer outModule, BytePointer outMessage) returns int = external;
////public function llvmParseBitcodeInContext0(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, LLVMModuleRef outModule, byte[] outMessage) returns int = external;
////public function llvmParseBitcodeInContext(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, LLVMModuleRef outModule, ByteBuffer outMessage) returns int = external;
////public function llvmParseBitcodeInContext1(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, PointerPointer outModule, byte[] outMessage) returns int = external;
//public function llvmParseBitcodeInContext2(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, LLVMModuleRef outModule, PointerPointer outMessage) returns int = external;
////public function llvmParseBitcodeInContext(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, LLVMModuleRef outModule, BytePointer outMessage) returns int = external;
////public function llvmParseBitcodeInContext(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, PointerPointer outModule, ByteBuffer outMessage) returns int = external;
//public function llvmParseBitcodeInContext20(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, PointerPointer outModule) returns int = external;
//public function llvmParseBitcodeInContext21(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, LLVMModuleRef outModule) returns int = external;
////public function llvmGetBitcodeModuleInContext0(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, LLVMModuleRef outM, byte[] outMessage) returns int = external;
////public function llvmGetBitcodeModuleInContext(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, PointerPointer outM, BytePointer outMessage) returns int = external;
////public function llvmGetBitcodeModuleInContext(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, LLVMModuleRef outM, ByteBuffer outMessage) returns int = external;
////public function llvmGetBitcodeModuleInContext1(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, PointerPointer outM, byte[] outMessage) returns int = external;
////public function llvmGetBitcodeModuleInContext(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, LLVMModuleRef outM, BytePointer outMessage) returns int = external;
//public function llvmGetBitcodeModuleInContext2(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, LLVMModuleRef outM, PointerPointer outMessage) returns int = external;
////public function llvmGetBitcodeModuleInContext(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, PointerPointer outM, ByteBuffer outMessage) returns int = external;
//public function llvmGetBitcodeModuleInContext20(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, LLVMModuleRef outM) returns int = external;
//public function llvmGetBitcodeModuleInContext21(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, PointerPointer outM) returns int = external;
////public function llvmGetBitcodeModule0(LLVMMemoryBufferRef memBuf, LLVMModuleRef outM, byte[] outMessage) returns int = external;
////public function llvmGetBitcodeModule(LLVMMemoryBufferRef memBuf, PointerPointer outM, ByteBuffer outMessage) returns int = external;
////public function llvmGetBitcodeModule(LLVMMemoryBufferRef memBuf, PointerPointer outM, BytePointer outMessage) returns int = external;
////public function llvmGetBitcodeModule1(LLVMMemoryBufferRef memBuf, PointerPointer outM, byte[] outMessage) returns int = external;
////public function llvmGetBitcodeModule(LLVMMemoryBufferRef memBuf, LLVMModuleRef outM, ByteBuffer outMessage) returns int = external;
//public function llvmGetBitcodeModule2(LLVMMemoryBufferRef memBuf, LLVMModuleRef outM, PointerPointer outMessage) returns int = external;
////public function llvmGetBitcodeModule(LLVMMemoryBufferRef memBuf, LLVMModuleRef outM, BytePointer outMessage) returns int = external;
//public function llvmGetBitcodeModule20(LLVMMemoryBufferRef memBuf, LLVMModuleRef outM) returns int = external;
//public function llvmGetBitcodeModule21(LLVMMemoryBufferRef memBuf, PointerPointer outM) returns int = external;
//public function llvmWriteBitcodeToFile(LLVMModuleRef m, string path) returns int = external;
////public function llvmWriteBitcodeToFile(LLVMModuleRef m, BytePointer path) returns int = external;
//public function llvmWriteBitcodeToFD(LLVMModuleRef m, int fd, int shouldClose, int unbuffered) returns int = external;
//public function llvmWriteBitcodeToFileHandle(LLVMModuleRef m, int fileHandle) returns int = external;
//public function llvmWriteBitcodeToMemoryBuffer(LLVMModuleRef m) returns LLVMMemoryBufferRef = external;
////public function llvmCreateDisasm(BytePointer tripleName, Pointer disInfo, int tagType, LLVMOpInfoCallback getOpInfo, LLVMSymbolLookupCallback symbolLookUp) returns LLVMDisasmContextRef = external;
//public function llvmCreateDisasm(string tripleName, Pointer disInfo, int tagType, LLVMOpInfoCallback getOpInfo, LLVMSymbolLookupCallback symbolLookUp) returns LLVMDisasmContextRef = external;
//public function llvmCreateDisasmCPU(string triple, string cpu, Pointer disInfo, int tagType, LLVMOpInfoCallback getOpInfo, LLVMSymbolLookupCallback symbolLookUp) returns LLVMDisasmContextRef = external;
////public function llvmCreateDisasmCPU(BytePointer triple, BytePointer cpu, Pointer disInfo, int tagType, LLVMOpInfoCallback getOpInfo, LLVMSymbolLookupCallback symbolLookUp) returns LLVMDisasmContextRef = external;
//public function llvmCreateDisasmCPUFeatures(string triple, string cpu, string features, Pointer disInfo, int tagType, LLVMOpInfoCallback getOpInfo, LLVMSymbolLookupCallback symbolLookUp) returns LLVMDisasmContextRef = external;
////public function llvmCreateDisasmCPUFeatures(BytePointer triple, BytePointer cpu, BytePointer features, Pointer disInfo, int tagType, LLVMOpInfoCallback getOpInfo, LLVMSymbolLookupCallback symbolLookUp) returns LLVMDisasmContextRef = external;
//public function llvmSetDisasmOptions(LLVMDisasmContextRef dc, int options) returns int = external;
//public function llvmDisasmDispose(LLVMDisasmContextRef dc) = external;
////public function llvmDisasmInstruction(LLVMDisasmContextRef dc, ByteBuffer bytes, int bytesSize, int pc, ByteBuffer outString, int outStringSize) returns int = external;
////public function llvmDisasmInstruction(LLVMDisasmContextRef dc, BytePointer bytes, int bytesSize, int pc, BytePointer outString, int outStringSize) returns int = external;
////public function llvmDisasmInstruction(LLVMDisasmContextRef dc, byte[] bytes, int bytesSize, int pc, byte[] outString, int outStringSize) returns int = external;
//public function llvmInitializeTransformUtils(LLVMPassRegistryRef r) = external;
//public function llvmInitializeScalarOpts(LLVMPassRegistryRef r) = external;
//public function llvmInitializeObjCARCOpts(LLVMPassRegistryRef r) = external;
//public function llvmInitializeVectorization(LLVMPassRegistryRef r) = external;
//public function llvmInitializeInstCombine(LLVMPassRegistryRef r) = external;
//public function llvmInitializeIPO(LLVMPassRegistryRef r) = external;
//public function llvmInitializeInstrumentation(LLVMPassRegistryRef r) = external;
//public function llvmInitializeAnalysis(LLVMPassRegistryRef r) = external;
//public function llvmInitializeIPA(LLVMPassRegistryRef r) = external;
//public function llvmInitializeCodeGen(LLVMPassRegistryRef r) = external;
//public function llvmInitializeTarget(LLVMPassRegistryRef r) = external;
////public function llvmParseIRInContext(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, PointerPointer outM, BytePointer outMessage) returns int = external;
////public function llvmParseIRInContext0(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, LLVMModuleRef outM, byte[] outMessage) returns int = external;
////public function llvmParseIRInContext(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, LLVMModuleRef outM, ByteBuffer outMessage) returns int = external;
////public function llvmParseIRInContext1(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, PointerPointer outM, byte[] outMessage) returns int = external;
//public function llvmParseIRInContext2(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, LLVMModuleRef outM, PointerPointer outMessage) returns int = external;
////public function llvmParseIRInContext(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, LLVMModuleRef outM, BytePointer outMessage) returns int = external;
////public function llvmParseIRInContext(LLVMContextRef contextRef, LLVMMemoryBufferRef memBuf, PointerPointer outM, ByteBuffer outMessage) returns int = external;
//public function llvmLinkModules2(LLVMModuleRef dest, LLVMModuleRef src) returns int = external;
////public function lto_get_version() returns BytePointer = external;
////public function lto_get_error_message() returns BytePointer = external;
////public function lto_module_is_object_file(string path) returns boolean = external;
////public function lto_module_is_object_file(BytePointer path) returns boolean = external;
////public function lto_module_is_object_file_for_target(BytePointer path, BytePointer target_triple_prefix) returns boolean = external;
////public function lto_module_is_object_file_for_target(string path, string target_triple_prefix) returns boolean = external;
////public function lto_module_has_objc_category(Pointer mem, int length) returns boolean = external;
////public function lto_module_is_object_file_in_memory(Pointer mem, int length) returns boolean = external;
////public function lto_module_is_object_file_in_memory_for_target(Pointer mem, int length, BytePointer target_triple_prefix) returns boolean = external;
////public function lto_module_is_object_file_in_memory_for_target(Pointer mem, int length, string target_triple_prefix) returns boolean = external;
////public function lto_module_create(string path) returns lto_module_t = external;
////public function lto_module_create(BytePointer path) returns lto_module_t = external;
////public function lto_module_create_from_memory(Pointer mem, int length) returns lto_module_t = external;
////public function lto_module_create_from_memory_with_path(Pointer mem, int length, BytePointer path) returns lto_module_t = external;
////public function lto_module_create_from_memory_with_path(Pointer mem, int length, string path) returns lto_module_t = external;
////public function lto_module_create_in_local_context(Pointer mem, int length, string path) returns lto_module_t = external;
////public function lto_module_create_in_local_context(Pointer mem, int length, BytePointer path) returns lto_module_t = external;
////public function lto_module_create_in_codegen_context(Pointer mem, int length, BytePointer path, lto_code_gen_t cg) returns lto_module_t = external;
////public function lto_module_create_in_codegen_context(Pointer mem, int length, string path, lto_code_gen_t cg) returns lto_module_t = external;
////public function lto_module_create_from_fd(int fd, string path, int file_size) returns lto_module_t = external;
////public function lto_module_create_from_fd(int fd, BytePointer path, int file_size) returns lto_module_t = external;
////public function lto_module_create_from_fd_at_offset(int fd, string path, int file_size, int map_size, int offset) returns lto_module_t = external;
////public function lto_module_create_from_fd_at_offset(int fd, BytePointer path, int file_size, int map_size, int offset) returns lto_module_t = external;
////public function lto_module_dispose(lto_module_t mod) = external;
////public function lto_module_get_target_triple(lto_module_t mod) returns BytePointer = external;
////public function lto_module_set_target_triple(lto_module_t mod, string triple) = external;
////public function lto_module_set_target_triple(lto_module_t mod, BytePointer triple) = external;
////public function lto_module_get_num_symbols(lto_module_t mod) returns int = external;
////public function lto_module_get_symbol_name(lto_module_t mod, int index) returns BytePointer = external;
////public function lto_module_get_symbol_attribute(lto_module_t mod, int index) returns int = external;
////public function lto_module_get_linkeropts(lto_module_t mod) returns BytePointer = external;
////public function lto_codegen_set_diagnostic_handler(lto_code_gen_t arg0, lto_diagnostic_handler_t arg1, Pointer arg2) = external;
////public function lto_codegen_create() returns lto_code_gen_t = external;
////public function lto_codegen_create_in_local_context() returns lto_code_gen_t = external;
////public function lto_codegen_dispose(lto_code_gen_t arg0) = external;
////public function lto_codegen_add_module(lto_code_gen_t cg, lto_module_t mod) returns boolean = external;
////public function lto_codegen_set_module(lto_code_gen_t cg, lto_module_t mod) = external;
////public function lto_codegen_set_debug_model(lto_code_gen_t cg, int arg1) returns boolean = external;
////public function lto_codegen_set_pic_model(lto_code_gen_t cg, int arg1) returns boolean = external;
////public function lto_codegen_set_cpu(lto_code_gen_t cg, BytePointer cpu) = external;
////public function lto_codegen_set_cpu(lto_code_gen_t cg, string cpu) = external;
////public function lto_codegen_set_assembler_path(lto_code_gen_t cg, string path) = external;
////public function lto_codegen_set_assembler_path(lto_code_gen_t cg, BytePointer path) = external;
////public function lto_codegen_set_assembler_args(lto_code_gen_t cg, ByteBuffer args, int nargs) = external;
////public function lto_codegen_set_assembler_args(lto_code_gen_t cg, byte[] args, int nargs) = external;
////public function lto_codegen_set_assembler_args(lto_code_gen_t cg, BytePointer args, int nargs) = external;
////public function lto_codegen_set_assembler_args(lto_code_gen_t cg, PointerPointer args, int nargs) = external;
////public function lto_codegen_add_must_preserve_symbol(lto_code_gen_t cg, string symbol) = external;
////public function lto_codegen_add_must_preserve_symbol(lto_code_gen_t cg, BytePointer symbol) = external;
////public function lto_codegen_write_merged_modules(lto_code_gen_t cg, BytePointer path) returns boolean = external;
////public function lto_codegen_write_merged_modules(lto_code_gen_t cg, string path) returns boolean = external;
////public function lto_codegen_compile(lto_code_gen_t cg, SizeTPointer length) returns Pointer = external;
////public function lto_codegen_compile_to_file(lto_code_gen_t cg, BytePointer name) returns boolean = external;
////public function lto_codegen_compile_to_file(lto_code_gen_t cg, byte[] name) returns boolean = external;
////public function lto_codegen_compile_to_file(lto_code_gen_t cg, ByteBuffer name) returns boolean = external;
////public function lto_codegen_compile_to_file(lto_code_gen_t cg, PointerPointer name) returns boolean = external;
////public function lto_codegen_optimize(lto_code_gen_t cg) returns boolean = external;
////public function lto_codegen_compile_optimized(lto_code_gen_t cg, SizeTPointer length) returns Pointer = external;
////public function lto_api_version() returns int = external;
////public function lto_codegen_debug_options(lto_code_gen_t cg, string arg1) = external;
////public function lto_codegen_debug_options(lto_code_gen_t cg, BytePointer arg1) = external;
////public function lto_initialize_disassembler() = external;
////public function lto_codegen_set_should_internalize(lto_code_gen_t cg, boolean shouldInternalize) = external;
////public function lto_codegen_set_should_embed_uselists(lto_code_gen_t cg, boolean shouldEmbedUselists) = external;
////public function thinlto_create_codegen() returns thinlto_code_gen_t = external;
////public function thinlto_codegen_dispose(thinlto_code_gen_t cg) = external;
////public function thinlto_codegen_add_module(thinlto_code_gen_t cg, BytePointer identifier, BytePointer data, int length) = external;
////public function thinlto_codegen_add_module(thinlto_code_gen_t cg, string identifier, string data, int length) = external;
////public function thinlto_codegen_process(thinlto_code_gen_t cg) = external;
////public function thinlto_module_get_num_objects(thinlto_code_gen_t cg) returns int = external;
////public function thinlto_module_get_object(thinlto_code_gen_t cg, int index) returns LTOObjectBuffer = external;
////public function thinlto_module_get_num_object_files(thinlto_code_gen_t cg) returns int = external;
////public function thinlto_module_get_object_file(thinlto_code_gen_t cg, int index) returns BytePointer = external;
////public function thinlto_codegen_set_pic_model(thinlto_code_gen_t cg, int arg1) returns boolean = external;
////public function thinlto_codegen_set_savetemps_dir(thinlto_code_gen_t cg, BytePointer save_temps_dir) = external;
////public function thinlto_codegen_set_savetemps_dir(thinlto_code_gen_t cg, string save_temps_dir) = external;
////public function thinlto_set_generated_objects_dir(thinlto_code_gen_t cg, string save_temps_dir) = external;
////public function thinlto_set_generated_objects_dir(thinlto_code_gen_t cg, BytePointer save_temps_dir) = external;
////public function thinlto_codegen_set_cpu(thinlto_code_gen_t cg, BytePointer cpu) = external;
////public function thinlto_codegen_set_cpu(thinlto_code_gen_t cg, string cpu) = external;
////public function thinlto_codegen_disable_codegen(thinlto_code_gen_t cg, boolean disable) = external;
////public function thinlto_codegen_set_codegen_only(thinlto_code_gen_t cg, boolean codegen_only) = external;
////public function thinlto_debug_options(ByteBuffer options, int number) = external;
////public function thinlto_debug_options(byte[] options, int number) = external;
////public function thinlto_debug_options(PointerPointer options, int number) = external;
////public function thinlto_debug_options(BytePointer options, int number) = external;
////public function lto_module_is_thinlto(lto_module_t mod) returns boolean = external;
////public function thinlto_codegen_add_must_preserve_symbol(thinlto_code_gen_t cg, BytePointer name, int length) = external;
////public function thinlto_codegen_add_must_preserve_symbol(thinlto_code_gen_t cg, string name, int length) = external;
////public function thinlto_codegen_add_cross_referenced_symbol(thinlto_code_gen_t cg, string name, int length) = external;
////public function thinlto_codegen_add_cross_referenced_symbol(thinlto_code_gen_t cg, BytePointer name, int length) = external;
////public function thinlto_codegen_set_cache_dir(thinlto_code_gen_t cg, BytePointer cache_dir) = external;
////public function thinlto_codegen_set_cache_dir(thinlto_code_gen_t cg, string cache_dir) = external;
////public function thinlto_codegen_set_cache_pruning_interval(thinlto_code_gen_t cg, int interval) = external;
////public function thinlto_codegen_set_final_cache_size_relative_to_available_space(thinlto_code_gen_t cg, int percentage) = external;
////public function thinlto_codegen_set_cache_entry_expiration(thinlto_code_gen_t cg, int expiration) = external;
//public function llvmCreateObjectFile(LLVMMemoryBufferRef memBuf) returns LLVMObjectFileRef = external;
//public function llvmDisposeObjectFile(LLVMObjectFileRef objectFile) = external;
//public function llvmGetSections(LLVMObjectFileRef objectFile) returns LLVMSectionIteratorRef = external;
//public function llvmDisposeSectionIterator(LLVMSectionIteratorRef si) = external;
//public function llvmIsSectionIteratorAtEnd(LLVMObjectFileRef objectFile, LLVMSectionIteratorRef si) returns int = external;
//public function llvmMoveToNextSection(LLVMSectionIteratorRef si) = external;
//public function llvmMoveToContainingSection(LLVMSectionIteratorRef sect, LLVMSymbolIteratorRef sym) = external;
//public function llvmGetSymbols(LLVMObjectFileRef objectFile) returns LLVMSymbolIteratorRef = external;
//public function llvmDisposeSymbolIterator(LLVMSymbolIteratorRef si) = external;
//public function llvmIsSymbolIteratorAtEnd(LLVMObjectFileRef objectFile, LLVMSymbolIteratorRef si) returns int = external;
//public function llvmMoveToNextSymbol(LLVMSymbolIteratorRef si) = external;
//public function llvmGetSectionName(LLVMSectionIteratorRef si) returns BytePointer = external;
//public function llvmGetSectionSize(LLVMSectionIteratorRef si) returns int = external;
//public function llvmGetSectionContents(LLVMSectionIteratorRef si) returns BytePointer = external;
//public function llvmGetSectionAddress(LLVMSectionIteratorRef si) returns int = external;
//public function llvmGetSectionContainsSymbol(LLVMSectionIteratorRef si, LLVMSymbolIteratorRef sym) returns int = external;
//public function llvmGetRelocations(LLVMSectionIteratorRef section) returns LLVMRelocationIteratorRef = external;
//public function llvmDisposeRelocationIterator(LLVMRelocationIteratorRef ri) = external;
//public function llvmIsRelocationIteratorAtEnd(LLVMSectionIteratorRef section, LLVMRelocationIteratorRef ri) returns int = external;
//public function llvmMoveToNextRelocation(LLVMRelocationIteratorRef ri) = external;
//public function llvmGetSymbolName(LLVMSymbolIteratorRef si) returns BytePointer = external;
//public function llvmGetSymbolAddress(LLVMSymbolIteratorRef si) returns int = external;
//public function llvmGetSymbolSize(LLVMSymbolIteratorRef si) returns int = external;
//public function llvmGetRelocationOffset(LLVMRelocationIteratorRef ri) returns int = external;
//public function llvmGetRelocationSymbol(LLVMRelocationIteratorRef ri) returns LLVMSymbolIteratorRef = external;
//public function llvmGetRelocationType(LLVMRelocationIteratorRef ri) returns int = external;
//public function llvmGetRelocationTypeName(LLVMRelocationIteratorRef ri) returns BytePointer = external;
//public function llvmGetRelocationValueString(LLVMRelocationIteratorRef ri) returns BytePointer = external;
public function llvmInitializeAllTargetInfos() = external;
public function llvmInitializeAllTargets() = external;
public function llvmInitializeAllTargetMCs() = external;
public function llvmInitializeAllAsmPrinters() = external;
public function llvmInitializeAllAsmParsers() = external;
//public function llvmInitializeAllDisassemblers() = external;
//public function llvmInitializeNativeTarget() returns int = external;
//public function llvmInitializeNativeAsmParser() returns int = external;
//public function llvmInitializeNativeAsmPrinter() returns int = external;
//public function llvmInitializeNativeDisassembler() returns int = external;
//public function llvmGetModuleDataLayout(LLVMModuleRef m) returns LLVMTargetDataRef = external;
//public function llvmSetModuleDataLayout(LLVMModuleRef m, LLVMTargetDataRef dl) = external;
////public function llvmCreateTargetData(BytePointer stringRep) returns LLVMTargetDataRef = external;
//public function llvmCreateTargetData(string stringRep) returns LLVMTargetDataRef = external;
//public function llvmDisposeTargetData(LLVMTargetDataRef td) = external;
//public function llvmAddTargetLibraryInfo(LLVMTargetLibraryInfoRef tli, LLVMPassManagerRef pm) = external;
//public function llvmCopyStringRepOfTargetData(LLVMTargetDataRef td) returns BytePointer = external;
//public function llvmByteOrder(LLVMTargetDataRef td) returns int = external;
//public function llvmPointerSize(LLVMTargetDataRef td) returns int = external;
//public function llvmPointerSizeForAS(LLVMTargetDataRef td, int asValue) returns int = external;
//public function llvmIntPtrType(LLVMTargetDataRef td) returns LLVMTypeRef = external;
//public function llvmIntPtrTypeForAS(LLVMTargetDataRef td, int asValue) returns LLVMTypeRef = external;
//public function llvmIntPtrTypeInContext(LLVMContextRef c, LLVMTargetDataRef td) returns LLVMTypeRef = external;
//public function llvmIntPtrTypeForASInContext(LLVMContextRef c, LLVMTargetDataRef td, int asValue) returns LLVMTypeRef = external;
//public function llvmSizeOfTypeInBits(LLVMTargetDataRef td, LLVMTypeRef ty) returns int = external;
//public function llvmStoreSizeOfType(LLVMTargetDataRef td, LLVMTypeRef ty) returns int = external;
//public function llvmABISizeOfType(LLVMTargetDataRef td, LLVMTypeRef ty) returns int = external;
//public function llvmABIAlignmentOfType(LLVMTargetDataRef td, LLVMTypeRef ty) returns int = external;
//public function llvmCallFrameAlignmentOfType(LLVMTargetDataRef td, LLVMTypeRef ty) returns int = external;
//public function llvmPreferredAlignmentOfType(LLVMTargetDataRef td, LLVMTypeRef ty) returns int = external;
//public function llvmPreferredAlignmentOfGlobal(LLVMTargetDataRef td, LLVMValueRef globalVar) returns int = external;
//public function llvmElementAtOffset(LLVMTargetDataRef td, LLVMTypeRef structTy, int offset) returns int = external;
//public function llvmOffsetOfElement(LLVMTargetDataRef td, LLVMTypeRef structTy, int element) returns int = external;
public function llvmGetFirstTarget() returns LLVMTargetRef = external;
//public function llvmGetNextTarget(LLVMTargetRef t) returns LLVMTargetRef = external;
////public function llvmGetTargetFromName(BytePointer name) returns LLVMTargetRef = external;
//public function llvmGetTargetFromName(string name) returns LLVMTargetRef = external;
////public function llvmGetTargetFromTriple(BytePointer triple, LLVMTargetRef t, byte[] errorMessage) returns int = external;
////public function llvmGetTargetFromTriple(string triple, PointerPointer t, BytePointer errorMessage) returns int = external;
////public function llvmGetTargetFromTriple(BytePointer triple, LLVMTargetRef t, ByteBuffer errorMessage) returns int = external;
////public function llvmGetTargetFromTriple(string triple, PointerPointer t, byte[] errorMessage) returns int = external;
////public function llvmGetTargetFromTriple(BytePointer triple, LLVMTargetRef t, PointerPointer errorMessage) returns int = external;
////public function llvmGetTargetFromTriple(BytePointer triple, LLVMTargetRef t, BytePointer errorMessage) returns int = external;
////public function llvmGetTargetFromTriple(string triple, PointerPointer t, ByteBuffer errorMessage) returns int = external;
//public function llvmGetTargetName(LLVMTargetRef t) returns BytePointer = external;
//public function llvmGetTargetDescription(LLVMTargetRef t) returns BytePointer = external;
//public function llvmTargetHasJIT(LLVMTargetRef t) returns int = external;
//public function llvmTargetHasTargetMachine(LLVMTargetRef t) returns int = external;
//public function llvmTargetHasAsmBackend(LLVMTargetRef t) returns int = external;
public function llvmCreateTargetMachine(LLVMTargetRef t, BytePointer triple, BytePointer cpu, BytePointer features, int level, int reloc, int codeModel) returns LLVMTargetMachineRef = external;
public function llvmDisposeTargetMachine(LLVMTargetMachineRef t) = external;
//public function llvmGetTargetMachineTarget(LLVMTargetMachineRef t) returns LLVMTargetRef = external;
//public function llvmGetTargetMachineTriple(LLVMTargetMachineRef t) returns BytePointer = external;
//public function llvmGetTargetMachineCPU(LLVMTargetMachineRef t) returns BytePointer = external;
//public function llvmGetTargetMachineFeatureString(LLVMTargetMachineRef t) returns BytePointer = external;
//public function llvmCreateTargetDataLayout(LLVMTargetMachineRef t) returns LLVMTargetDataRef = external;
//public function llvmSetTargetMachineAsmVerbosity(LLVMTargetMachineRef t, int verboseAsm) = external;
////public function llvmTargetMachineEmitToFile(LLVMTargetMachineRef t, LLVMModuleRef m, BytePointer filename, int codegen, BytePointer errorMessage) returns int = external;
public function llvmTargetMachineEmitToFile(LLVMTargetMachineRef t, LLVMModuleRef m, byte[] filename, int codegen, byte[] errorMessage) returns int = external;
////public function llvmTargetMachineEmitToFile(LLVMTargetMachineRef t, LLVMModuleRef m, ByteBuffer filename, int codegen, ByteBuffer errorMessage) returns int = external;
////public function llvmTargetMachineEmitToFile(LLVMTargetMachineRef t, LLVMModuleRef m, BytePointer filename, int codegen, PointerPointer errorMessage) returns int = external;
////public function llvmTargetMachineEmitToMemoryBuffer0(LLVMTargetMachineRef t, LLVMModuleRef m, int codegen, byte[] errorMessage, LLVMMemoryBufferRef outMemBuf) returns int = external;
////public function llvmTargetMachineEmitToMemoryBuffer(LLVMTargetMachineRef t, LLVMModuleRef m, int codegen, BytePointer errorMessage, PointerPointer outMemBuf) returns int = external;
////public function llvmTargetMachineEmitToMemoryBuffer(LLVMTargetMachineRef t, LLVMModuleRef m, int codegen, ByteBuffer errorMessage, LLVMMemoryBufferRef outMemBuf) returns int = external;
////public function llvmTargetMachineEmitToMemoryBuffer1(LLVMTargetMachineRef t, LLVMModuleRef m, int codegen, byte[] errorMessage, PointerPointer outMemBuf) returns int = external;
//public function llvmTargetMachineEmitToMemoryBuffer2(LLVMTargetMachineRef t, LLVMModuleRef m, int codegen, PointerPointer errorMessage, LLVMMemoryBufferRef outMemBuf) returns int = external;
////public function llvmTargetMachineEmitToMemoryBuffer(LLVMTargetMachineRef t, LLVMModuleRef m, int codegen, BytePointer errorMessage, LLVMMemoryBufferRef outMemBuf) returns int = external;
////public function llvmTargetMachineEmitToMemoryBuffer(LLVMTargetMachineRef t, LLVMModuleRef m, int codegen, ByteBuffer errorMessage, PointerPointer outMemBuf) returns int = external;
public function llvmGetDefaultTargetTriple() returns BytePointer = external;
//public function llvmAddAnalysisPasses(LLVMTargetMachineRef t, LLVMPassManagerRef pm) = external;
//public function llvmLinkInMCJIT() = external;
//public function llvmLinkInInterpreter() = external;
//public function llvmCreateGenericValueOfInt(LLVMTypeRef ty, int n, int isSigned) returns LLVMGenericValueRef = external;
//public function llvmCreateGenericValueOfPointer(Pointer p) returns LLVMGenericValueRef = external;
////public function llvmCreateGenericValueOfFloat(LLVMTypeRef ty, double n) returns LLVMGenericValueRef = external;
//public function llvmGenericValueIntWidth(LLVMGenericValueRef genValRef) returns int = external;
//public function llvmGenericValueToInt(LLVMGenericValueRef genVal, int isSigned) returns int = external;
//public function llvmGenericValueToPointer(LLVMGenericValueRef genVal) returns Pointer = external;
////public function llvmGenericValueToFloat(LLVMTypeRef tyRef, LLVMGenericValueRef genVal) returns double = external;
//public function llvmDisposeGenericValue(LLVMGenericValueRef genVal) = external;
////public function llvmCreateExecutionEngineForModule0(LLVMExecutionEngineRef outEE, LLVMModuleRef m, byte[] outError) returns int = external;
////public function llvmCreateExecutionEngineForModule(PointerPointer outEE, LLVMModuleRef m, ByteBuffer outError) returns int = external;
////public function llvmCreateExecutionEngineForModule(PointerPointer outEE, LLVMModuleRef m, BytePointer outError) returns int = external;
////public function llvmCreateExecutionEngineForModule(LLVMExecutionEngineRef outEE, LLVMModuleRef m, ByteBuffer outError) returns int = external;
////public function llvmCreateExecutionEngineForModule1(PointerPointer outEE, LLVMModuleRef m, byte[] outError) returns int = external;
//public function llvmCreateExecutionEngineForModule2(LLVMExecutionEngineRef outEE, LLVMModuleRef m, PointerPointer outError) returns int = external;
////public function llvmCreateExecutionEngineForModule(LLVMExecutionEngineRef outEE, LLVMModuleRef m, BytePointer outError) returns int = external;
////public function llvmCreateInterpreterForModule0(LLVMExecutionEngineRef outInterp, LLVMModuleRef m, byte[] outError) returns int = external;
////public function llvmCreateInterpreterForModule(PointerPointer outInterp, LLVMModuleRef m, BytePointer outError) returns int = external;
////public function llvmCreateInterpreterForModule(LLVMExecutionEngineRef outInterp, LLVMModuleRef m, ByteBuffer outError) returns int = external;
////public function llvmCreateInterpreterForModule1(PointerPointer outInterp, LLVMModuleRef m, byte[] outError) returns int = external;
//public function llvmCreateInterpreterForModule2(LLVMExecutionEngineRef outInterp, LLVMModuleRef m, PointerPointer outError) returns int = external;
////public function llvmCreateInterpreterForModule(LLVMExecutionEngineRef outInterp, LLVMModuleRef m, BytePointer outError) returns int = external;
////public function llvmCreateInterpreterForModule(PointerPointer outInterp, LLVMModuleRef m, ByteBuffer outError) returns int = external;
////public function llvmCreateJITCompilerForModule(PointerPointer outJIT, LLVMModuleRef m, int optLevel, BytePointer outError) returns int = external;
////public function llvmCreateJITCompilerForModule0(LLVMExecutionEngineRef outJIT, LLVMModuleRef m, int optLevel, byte[] outError) returns int = external;
////public function llvmCreateJITCompilerForModule(LLVMExecutionEngineRef outJIT, LLVMModuleRef m, int optLevel, ByteBuffer outError) returns int = external;
////public function llvmCreateJITCompilerForModule1(PointerPointer outJIT, LLVMModuleRef m, int optLevel, byte[] outError) returns int = external;
//public function llvmCreateJITCompilerForModule2(LLVMExecutionEngineRef outJIT, LLVMModuleRef m, int optLevel, PointerPointer outError) returns int = external;
////public function llvmCreateJITCompilerForModule(LLVMExecutionEngineRef outJIT, LLVMModuleRef m, int optLevel, BytePointer outError) returns int = external;
////public function llvmCreateJITCompilerForModule(PointerPointer outJIT, LLVMModuleRef m, int optLevel, ByteBuffer outError) returns int = external;
//public function llvmInitializeMCJITCompilerOptions(LLVMMCJITCompilerOptions options, int sizeOfOptions) = external;
////public function llvmCreateMCJITCompilerForModule0(LLVMExecutionEngineRef outJIT, LLVMModuleRef m, LLVMMCJITCompilerOptions options, int sizeOfOptions, byte[] outError) returns int = external;
////public function llvmCreateMCJITCompilerForModule(PointerPointer outJIT, LLVMModuleRef m, LLVMMCJITCompilerOptions options, int sizeOfOptions, BytePointer outError) returns int = external;
////public function llvmCreateMCJITCompilerForModule(LLVMExecutionEngineRef outJIT, LLVMModuleRef m, LLVMMCJITCompilerOptions options, int sizeOfOptions, ByteBuffer outError) returns int = external;
////public function llvmCreateMCJITCompilerForModule1(PointerPointer outJIT, LLVMModuleRef m, LLVMMCJITCompilerOptions options, int sizeOfOptions, byte[] outError) returns int = external;
//public function llvmCreateMCJITCompilerForModule2(LLVMExecutionEngineRef outJIT, LLVMModuleRef m, LLVMMCJITCompilerOptions options, int sizeOfOptions, PointerPointer outError) returns int = external;
////public function llvmCreateMCJITCompilerForModule(LLVMExecutionEngineRef outJIT, LLVMModuleRef m, LLVMMCJITCompilerOptions options, int sizeOfOptions, BytePointer outError) returns int = external;
////public function llvmCreateMCJITCompilerForModule(PointerPointer outJIT, LLVMModuleRef m, LLVMMCJITCompilerOptions options, int sizeOfOptions, ByteBuffer outError) returns int = external;
//public function llvmDisposeExecutionEngine(LLVMExecutionEngineRef ee) = external;
//public function llvmRunStaticConstructors(LLVMExecutionEngineRef ee) = external;
//public function llvmRunStaticDestructors(LLVMExecutionEngineRef ee) = external;
////public function llvmRunFunctionAsMain(LLVMExecutionEngineRef ee, LLVMValueRef f, int argC, ByteBuffer argV, ByteBuffer envP) returns int = external;
////public function llvmRunFunctionAsMain(LLVMExecutionEngineRef ee, LLVMValueRef f, int argC, BytePointer argV, BytePointer envP) returns int = external;
////public function llvmRunFunctionAsMain0(LLVMExecutionEngineRef ee, LLVMValueRef f, int argC, byte[] argV, byte[] envP) returns int = external;
//public function llvmRunFunctionAsMain1(LLVMExecutionEngineRef ee, LLVMValueRef f, int argC, PointerPointer argV, PointerPointer envP) returns int = external;
//public function llvmRunFunction0(LLVMExecutionEngineRef ee, LLVMValueRef f, int numArgs, PointerPointer args) returns LLVMGenericValueRef = external;
//public function llvmRunFunction1(LLVMExecutionEngineRef ee, LLVMValueRef f, int numArgs, LLVMGenericValueRef args) returns LLVMGenericValueRef = external;
//public function llvmFreeMachineCodeForFunction(LLVMExecutionEngineRef ee, LLVMValueRef f) = external;
//public function llvmAddModule(LLVMExecutionEngineRef ee, LLVMModuleRef m) = external;
////public function llvmRemoveModule0(LLVMExecutionEngineRef ee, LLVMModuleRef m, LLVMModuleRef outMod, byte[] outError) returns int = external;
////public function llvmRemoveModule(LLVMExecutionEngineRef ee, LLVMModuleRef m, PointerPointer outMod, BytePointer outError) returns int = external;
////public function llvmRemoveModule(LLVMExecutionEngineRef ee, LLVMModuleRef m, LLVMModuleRef outMod, ByteBuffer outError) returns int = external;
////public function llvmRemoveModule1(LLVMExecutionEngineRef ee, LLVMModuleRef m, PointerPointer outMod, byte[] outError) returns int = external;
//public function llvmRemoveModule2(LLVMExecutionEngineRef ee, LLVMModuleRef m, LLVMModuleRef outMod, PointerPointer outError) returns int = external;
////public function llvmRemoveModule(LLVMExecutionEngineRef ee, LLVMModuleRef m, LLVMModuleRef outMod, BytePointer outError) returns int = external;
////public function llvmRemoveModule(LLVMExecutionEngineRef ee, LLVMModuleRef m, PointerPointer outMod, ByteBuffer outError) returns int = external;
//public function llvmFindFunction(LLVMExecutionEngineRef ee, string name, PointerPointer outFn) returns int = external;
////public function llvmFindFunction(LLVMExecutionEngineRef ee, BytePointer name, LLVMValueRef outFn) returns int = external;
//public function llvmRecompileAndRelinkFunction(LLVMExecutionEngineRef ee, LLVMValueRef fn) returns Pointer = external;
//public function llvmGetExecutionEngineTargetData(LLVMExecutionEngineRef ee) returns LLVMTargetDataRef = external;
//public function llvmGetExecutionEngineTargetMachine(LLVMExecutionEngineRef ee) returns LLVMTargetMachineRef = external;
//public function llvmAddGlobalMapping(LLVMExecutionEngineRef ee, LLVMValueRef global, Pointer addr) = external;
//public function llvmGetPointerToGlobal(LLVMExecutionEngineRef ee, LLVMValueRef global) returns Pointer = external;
////public function llvmGetGlobalValueAddress(LLVMExecutionEngineRef ee, BytePointer name) returns int = external;
//public function llvmGetGlobalValueAddress(LLVMExecutionEngineRef ee, string name) returns int = external;
//public function llvmGetFunctionAddress(LLVMExecutionEngineRef ee, string name) returns int = external;
////public function llvmGetFunctionAddress(LLVMExecutionEngineRef ee, BytePointer name) returns int = external;
//public function llvmCreateSimpleMCJITMemoryManager(Pointer opaque, LLVMMemoryManagerAllocateCodeSectionCallback allocateCodeSection, LLVMMemoryManagerAllocateDataSectionCallback allocateDataSection, LLVMMemoryManagerFinalizeMemoryCallback finalizeMemory, LLVMMemoryManagerDestroyCallback destroy) returns LLVMMCJITMemoryManagerRef = external;
//public function llvmDisposeMCJITMemoryManager(LLVMMCJITMemoryManagerRef mm) = external;
//public function llvmAddArgumentPromotionPass(LLVMPassManagerRef pm) = external;
//public function llvmAddConstantMergePass(LLVMPassManagerRef pm) = external;
//public function llvmAddCalledValuePropagationPass(LLVMPassManagerRef pm) = external;
//public function llvmAddDeadArgEliminationPass(LLVMPassManagerRef pm) = external;
//public function llvmAddFunctionAttrsPass(LLVMPassManagerRef pm) = external;
//public function llvmAddFunctionInliningPass(LLVMPassManagerRef pm) = external;
//public function llvmAddAlwaysInlinerPass(LLVMPassManagerRef pm) = external;
//public function llvmAddGlobalDCEPass(LLVMPassManagerRef pm) = external;
//public function llvmAddGlobalOptimizerPass(LLVMPassManagerRef pm) = external;
//public function llvmAddIPConstantPropagationPass(LLVMPassManagerRef pm) = external;
//public function llvmAddPruneEHPass(LLVMPassManagerRef pm) = external;
//public function llvmAddIPSCCPPass(LLVMPassManagerRef pm) = external;
//public function llvmAddInternalizePass(LLVMPassManagerRef arg0, int allButMain) = external;
//public function llvmAddStripDeadPrototypesPass(LLVMPassManagerRef pm) = external;
//public function llvmAddStripSymbolsPass(LLVMPassManagerRef pm) = external;
public function llvmPassManagerBuilderCreate() returns LLVMPassManagerBuilderRef = external;
public function llvmPassManagerBuilderDispose(LLVMPassManagerBuilderRef pmb) = external;
public function llvmPassManagerBuilderSetOptLevel(LLVMPassManagerBuilderRef pmb, int optLevel) = external;
//public function llvmPassManagerBuilderSetSizeLevel(LLVMPassManagerBuilderRef pmb, int sizeLevel) = external;
//public function llvmPassManagerBuilderSetDisableUnitAtATime(LLVMPassManagerBuilderRef pmb, int value) = external;
//public function llvmPassManagerBuilderSetDisableUnrollLoops(LLVMPassManagerBuilderRef pmb, int value) = external;
//public function llvmPassManagerBuilderSetDisableSimplifyLibCalls(LLVMPassManagerBuilderRef pmb, int value) = external;
//public function llvmPassManagerBuilderUseInlinerWithThreshold(LLVMPassManagerBuilderRef pmb, int threshold) = external;
public function llvmPassManagerBuilderPopulateFunctionPassManager(LLVMPassManagerBuilderRef pmb, LLVMPassManagerRef pm) = external;
public function llvmPassManagerBuilderPopulateModulePassManager(LLVMPassManagerBuilderRef pmb, LLVMPassManagerRef pm) = external;
//public function llvmPassManagerBuilderPopulateLTOPassManager(LLVMPassManagerBuilderRef pmb, LLVMPassManagerRef pm, int internalize, int runInliner) = external;
//public function llvmAddAggressiveDCEPass(LLVMPassManagerRef pm) = external;
//public function llvmAddBitTrackingDCEPass(LLVMPassManagerRef pm) = external;
//public function llvmAddAlignmentFromAssumptionsPass(LLVMPassManagerRef pm) = external;
//public function llvmAddCFGSimplificationPass(LLVMPassManagerRef pm) = external;
//public function llvmAddDeadStoreEliminationPass(LLVMPassManagerRef pm) = external;
//public function llvmAddScalarizerPass(LLVMPassManagerRef pm) = external;
//public function llvmAddMergedLoadStoreMotionPass(LLVMPassManagerRef pm) = external;
//public function llvmAddGVNPass(LLVMPassManagerRef pm) = external;
//public function llvmAddNewGVNPass(LLVMPassManagerRef pm) = external;
//public function llvmAddIndVarSimplifyPass(LLVMPassManagerRef pm) = external;
//public function llvmAddInstructionCombiningPass(LLVMPassManagerRef pm) = external;
//public function llvmAddJumpThreadingPass(LLVMPassManagerRef pm) = external;
//public function llvmAddLICMPass(LLVMPassManagerRef pm) = external;
//public function llvmAddLoopDeletionPass(LLVMPassManagerRef pm) = external;
//public function llvmAddLoopIdiomPass(LLVMPassManagerRef pm) = external;
//public function llvmAddLoopRotatePass(LLVMPassManagerRef pm) = external;
//public function llvmAddLoopRerollPass(LLVMPassManagerRef pm) = external;
//public function llvmAddLoopUnrollPass(LLVMPassManagerRef pm) = external;
//public function llvmAddLoopUnswitchPass(LLVMPassManagerRef pm) = external;
//public function llvmAddMemCpyOptPass(LLVMPassManagerRef pm) = external;
//public function llvmAddPartiallyInlineLibCallsPass(LLVMPassManagerRef pm) = external;
//public function llvmAddLowerSwitchPass(LLVMPassManagerRef pm) = external;
//public function llvmAddPromoteMemoryToRegisterPass(LLVMPassManagerRef pm) = external;
//public function llvmAddReassociatePass(LLVMPassManagerRef pm) = external;
//public function llvmAddSCCPPass(LLVMPassManagerRef pm) = external;
//public function llvmAddScalarReplAggregatesPass(LLVMPassManagerRef pm) = external;
//public function llvmAddScalarReplAggregatesPassSSA(LLVMPassManagerRef pm) = external;
//public function llvmAddScalarReplAggregatesPassWithThreshold(LLVMPassManagerRef pm, int threshold) = external;
//public function llvmAddSimplifyLibCallsPass(LLVMPassManagerRef pm) = external;
//public function llvmAddTailCallEliminationPass(LLVMPassManagerRef pm) = external;
//public function llvmAddConstantPropagationPass(LLVMPassManagerRef pm) = external;
//public function llvmAddDemoteMemoryToRegisterPass(LLVMPassManagerRef pm) = external;
//public function llvmAddVerifierPass(LLVMPassManagerRef pm) = external;
//public function llvmAddCorrelatedValuePropagationPass(LLVMPassManagerRef pm) = external;
//public function llvmAddEarlyCSEPass(LLVMPassManagerRef pm) = external;
//public function llvmAddEarlyCSEMemSSAPass(LLVMPassManagerRef pm) = external;
//public function llvmAddLowerExpectIntrinsicPass(LLVMPassManagerRef pm) = external;
//public function llvmAddTypeBasedAliasAnalysisPass(LLVMPassManagerRef pm) = external;
//public function llvmAddScopedNoAliasAAPass(LLVMPassManagerRef pm) = external;
//public function llvmAddBasicAliasAnalysisPass(LLVMPassManagerRef pm) = external;
//public function llvmAddBBVectorizePass(LLVMPassManagerRef pm) = external;
//public function llvmAddLoopVectorizePass(LLVMPassManagerRef pm) = external;
//public function llvmAddSLPVectorizePass(LLVMPassManagerRef pm) = external;
public function llvmCheckIfTypesMatch(LLVMTypeRef castType, LLVMTypeRef lhsType) returns boolean = external;
