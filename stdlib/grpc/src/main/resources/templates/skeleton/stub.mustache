public type {{serviceName}}{{#equals stubType "blocking"}}Blocking{{/equals}}Client client object {

    *grpc:AbstractClientEndpoint;

    private grpc:Client? grpcClient = ();

    public function __init(string url, grpc:ClientConfiguration? config = ()) {
        // initialize client endpoint.
        grpc:Client c = new(url, config);
        grpc:Error? result = c.initStub(self, "{{stubType}}", ROOT_DESCRIPTOR, getDescriptorMap());
        if (result is grpc:Error) {
            error err = result;
            panic err;
        } else {
            self.grpcClient = c;
        }
    }
{{#blockingFunctions}}
    public remote function {{methodName}}({{#if inputType}}{{inputType}} req, {{/if}}grpc:Headers? headers = ()) returns ({{#if outputType}}[{{outputType}}, grpc:Headers]{{else}}grpc:Headers{{/if}}|grpc:Error) {
        {{#unless inputType}}Empty req = {};{{/unless}}
        if !(self.grpcClient is grpc:Client) {
            error err = error("UninitializedFieldsErrorType", message = "Field(s) are not initialized");
            return grpc:prepareError(grpc:INTERNAL_ERROR, "Field(s) are not initialized", err);
        }
        grpc:Client tempGrpcClient = <grpc:Client> self.grpcClient;
        var payload = check tempGrpcClient->blockingExecute("{{methodId}}", req, headers);
        grpc:Headers resHeaders = new;
        {{#if outputType}}anydata result = ();
        [result, resHeaders] = payload;
        {{#not_equal outputType "string"}}
        return [<{{outputType}}>result, resHeaders];
        {{/not_equal}}{{#equals outputType "string"}}return [result.toString(), resHeaders];{{/equals}}{{else}}[_, resHeaders] = payload;
        return resHeaders;{{/if}}
    }
{{/blockingFunctions}}{{#nonBlockingFunctions}}
    public remote function {{methodName}}({{#if inputType}}{{inputType}} req, {{/if}}service msgListener, grpc:Headers? headers = ()) returns (grpc:Error?) {
        {{#unless inputType}}Empty req = {};{{/unless}}
        if !(self.grpcClient is grpc:Client) {
            error err = error("UninitializedFieldsErrorType", message = "Field(s) are not initialized");
            return grpc:prepareError(grpc:INTERNAL_ERROR, "Field(s) are not initialized", err);
        }
        grpc:Client tempGrpcClient = <grpc:Client> self.grpcClient;
        return tempGrpcClient->nonBlockingExecute("{{methodId}}", req, msgListener, headers);
    }
{{/nonBlockingFunctions}}{{#streamingFunctions}}
    public remote function {{methodName}}(service msgListener, grpc:Headers? headers = ()) returns (grpc:StreamingClient|grpc:Error) {
        if !(self.grpcClient is grpc:Client) {
            error err = error("UninitializedFieldsErrorType", message = "Field(s) are not initialized");
            return grpc:prepareError(grpc:INTERNAL_ERROR, "Field(s) are not initialized", err);
        }
        grpc:Client tempGrpcClient = <grpc:Client> self.grpcClient;
        return tempGrpcClient->streamingExecute("{{methodId}}", msgListener, headers);
    }{{/streamingFunctions}}
};